"use strict";(self.webpackChunkmyblog_2_0=self.webpackChunkmyblog_2_0||[]).push([[9543],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=u(t),g=a,m=c["".concat(p,".").concat(g)]||c[g]||d[g]||l;return t?r.createElement(m,o(o({ref:n},s),{},{components:t})):r.createElement(m,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},79836:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const l={title:"spring boot \uc744 influxDB \uc640 \uc5f0\ub3d9\ud558\uae30",date:new Date("2019-02-10T10:14:18.000Z"),tags:["java","spring","docker","spring boot","influxDB"]},o="\uc694\uad6c\uc0ac\ud56d",i={permalink:"/blog/post/spring-boot-\uc744-influxDB-\uc640-\uc5f0\ub3d9\ud558\uae30",source:"@site/blog/spring-boot-\uc744-influxDB-\uc640-\uc5f0\ub3d9\ud558\uae30.mdx",title:"spring boot \uc744 influxDB \uc640 \uc5f0\ub3d9\ud558\uae30",description:"- spring boot : 1.5.10.RELEASE \uc774\uc0c1",date:"2019-02-10T10:14:18.000Z",formattedDate:"2019\ub144 2\uc6d4 10\uc77c",tags:[{label:"java",permalink:"/blog/post/tags/java"},{label:"spring",permalink:"/blog/post/tags/spring"},{label:"docker",permalink:"/blog/post/tags/docker"},{label:"spring boot",permalink:"/blog/post/tags/spring-boot"},{label:"influxDB",permalink:"/blog/post/tags/influx-db"}],readingTime:2.53,hasTruncateMarker:!1,authors:[],frontMatter:{title:"spring boot \uc744 influxDB \uc640 \uc5f0\ub3d9\ud558\uae30",date:"2019-02-10T10:14:18.000Z",tags:["java","spring","docker","spring boot","influxDB"]},prevItem:{title:"\uc6b0\ubd84\ud22c 18.04 \ucd5c\ub300\uc808\uc804\ubaa8\ub4dc \ud65c\uc131\ud654",permalink:"/blog/post/\uc6b0\ubd84\ud22c-18-04-\ucd5c\ub300\uc808\uc804\ubaa8\ub4dc-\ud65c\uc131\ud654"},nextItem:{title:"vagrant box \uc800\uc7a5\uc704\uce58 \uc124\uc815",permalink:"/blog/post/vagrant-box-\uc800\uc7a5\uc704\uce58-\uc124\uc815"}},p={authorsImageUrls:[]},u=[],s={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"spring boot : 1.5.10.RELEASE \uc774\uc0c1"),(0,a.kt)("li",{parentName:"ul"},"jdk : 1.8 \uc774\uc0c1"),(0,a.kt)("li",{parentName:"ul"},"influxDB : 2.7")),(0,a.kt)("h1",{id:"influxdb-\uc124\uce58"},"influxDB \uc124\uce58"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"docker \uc5d0\uc11c \uc124\uce58")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull influxdb\ndocker run --name  influxdb-test -p8086:8086 -d influxdb\n")),(0,a.kt)("h1",{id:"\uc0d8\ud50c-\ub370\uc774\ud130-\uc0dd\uc131\ud558\uae30"},"\uc0d8\ud50c \ub370\uc774\ud130 \uc0dd\uc131\ud558\uae30"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"influxDB \uc811\uc18d")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker exec -it influxdb-test /bin/bash\ninflux -precision rfc3339\nConnected to http://localhost:8086 version 1.4.x\nInfluxDB shell 1.4.x\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0dd\uc131")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"CREATE DATABASE NOAA_water_database\nexit\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\uc0d8\ud50c \ub370\uc774\ud130 \ub2e4\uc6b4\ubc1b\uae30")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ub370\uc774\ud130\ub97c influxDB \uc5d0 import \ud558\uae30")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"influx -import -path=NOAA_data.txt -precision=s -database=NOAA_water_database\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\ud14c\uc2a4\ud2b8 \ud558\uae30")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"influx -precision rfc3339\nuse NOAA_water_database\nSELECT * FROM h2o_feet LIMIT 5\n")),(0,a.kt)("h1",{id:"spring-boot-\uc5d0-\uc5f0\ub3d9\ud558\uae30"},"spring boot \uc5d0 \uc5f0\ub3d9\ud558\uae30"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"spring boot \ud504\ub85c\uc81d\ud2b8 \uc0dd\uc131"),(0,a.kt)("li",{parentName:"ul"},"pom.xml \uc124\uc815")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.springframework</groupId>\n    <artifactId>influxDB-Test</artifactId>\n    <version>0.1.0</version>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.0.5.RELEASE</version>\n    </parent>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.influxdb</groupId>\n            <artifactId>influxdb-java</artifactId>\n            <version>2.14</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.github.miwurster</groupId>\n            <artifactId>spring-data-influxdb</artifactId>\n            <version>1.8</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"spring configure \uc124\uc815 (InfluxDBConfiguration.java)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"@Configuration\n@EnableConfigurationProperties(InfluxDBProperties.class)\npublic class InfluxDBConfiguration\n{\n  @Bean\n  public InfluxDBConnectionFactory connectionFactory(final InfluxDBProperties properties)\n  {\n    return new InfluxDBConnectionFactory(properties);\n  }\n\n  @Bean\n  public InfluxDBTemplate<Point> influxDBTemplate(final InfluxDBConnectionFactory connectionFactory)\n  {\n    /*\n     * You can use your own 'PointCollectionConverter' implementation, e.g. in case\n     * you want to use your own custom measurement object.\n     */\n    return new InfluxDBTemplate<>(connectionFactory, new PointConverter());\n  }\n\n  @Bean\n  public DefaultInfluxDBTemplate defaultTemplate(final InfluxDBConnectionFactory connectionFactory)\n  {\n    /*\n     * If you are just dealing with Point objects from 'influxdb-java' you could\n     * also use an instance of class DefaultInfluxDBTemplate.\n     */\n    return new DefaultInfluxDBTemplate(connectionFactory);\n  }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"application.properties \uc124\uc815")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-properties"},"spring.influxdb.url=http://localhost:8086\nspring.influxdb.database=NOAA_water_database\nspring.influxdb.username=~\nspring.influxdb.retentionPolicy=autogen\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DTO \uc0dd\uc131(H2oFeet.java)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Measurement(name = "h2o_feet")\npublic class H2oFeet {\n    @Column(name = "water_level")\n    private Double water_level;\n    @Column(name = "level description")\n    private String level_description;\n    @Column(name = "location")\n    private String location;\n    @Column(name = "time")\n    private Instant time;\n\n\n    public Double getWater_level() {\n        return water_level;\n    }\n    public void setWater_level(Double water_level) {\n        this.water_level = water_level;\n    }\n    public String getLevel_description() {\n        return level_description;\n    }\n    public void setLevel_description(String level_description) {\n        this.level_description = level_description;\n    }\n    public String getLocation() {\n        return location;\n    }\n    public void setLocation(String location) {\n        this.location = location;\n    }\n    public Instant getTime() {\n        return time;\n    }\n    public void setTime(Instant time) {\n        this.time = time;\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"controller \uc0dd\uc131 (MainController.java)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Controller\n@RequestMapping(path="/api/v1/NOAAWater")\npublic class MainController {\n\n    @Autowired\n    private MainService mainService;\n\n\n    @GetMapping(path="/h2os")\n    public @ResponseBody List<H2oFeet> h2o_list() {\n\n\n\n        return mainService.h2o_list();\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"service \uc0dd\uc131 (MainService.java)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@Service\npublic class MainService {\n\n    @Autowired\n    private InfluxDBTemplate<Point> influxDBTemplate;\n\n    public List<H2oFeet> h2o_list() {\n        Query query = QueryBuilder.newQuery("SELECT * FROM h2o_feet LIMIT 1000")\n                .forDatabase("NOAA_water_database")\n                .create();\n\n\n        QueryResult queryResult = influxDBTemplate.query(query);\n\n\n        InfluxDBResultMapper resultMapper = new InfluxDBResultMapper(); // thread-safe - can be reused\n\n        return resultMapper.toPOJO(queryResult, H2oFeet.class);\n    }\n}\n')),(0,a.kt)("h1",{id:"test"},"Test"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"curl")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$curl -X GET http://localhost:8080/api/v1/NOAAWater/h2os\n")),(0,a.kt)("p",null,"github : ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gadian88/influxDB-Test"},"https://github.com/gadian88/influxDB-Test")))}d.isMDXComponent=!0}}]);