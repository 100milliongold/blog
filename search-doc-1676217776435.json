[{"title":"다시 깃헙페이지로 이사갑니다.","type":0,"sectionRef":"#","url":"/blog/blog/2023/02/12/이사중/inde","content":"","keywords":""},{"title":"이사중​","type":1,"pageTitle":"다시 깃헙페이지로 이사갑니다.","url":"/blog/blog/2023/02/12/이사중/inde#이사중","content":"커스터마이징 하는겸 구글에 노출되기 위해서 "},{"title":"할일​","type":1,"pageTitle":"다시 깃헙페이지로 이사갑니다.","url":"/blog/blog/2023/02/12/이사중/inde#할일","content":" 메인화면 제작 곳곳에 있는 자료들 통합 사이트 등록 댓글 기능 개발 "},{"title":"Ambari Agent가 실행되고도 Ambari 에서는 heartbeat lost가 발생할경우","type":0,"sectionRef":"#","url":"/blog/blog/Ambari-Agent가-실행되고도-Ambari-에서는-heartbeat-lost가-발생할경우","content":"","keywords":""},{"title":"시간동기화 문제​","type":1,"pageTitle":"Ambari Agent가 실행되고도 Ambari 에서는 heartbeat lost가 발생할경우","url":"/blog/blog/Ambari-Agent가-실행되고도-Ambari-에서는-heartbeat-lost가-발생할경우#시간동기화-문제","content":"해당 호스트들이 몇초 이상 시간차가 나서 인식을 안할수도 있다. 해결방안 : 각각의 Ambari Node 서버들에서 다음과 같은 명령어를 실행한다. systemctl stop ntpd ntpdate 0.centos.pool.ntp.org systemctl start ntpd ambari-agent restart open ssl 설정문제 "},{"title":"Ambari metric collector connection timeout","type":0,"sectionRef":"#","url":"/blog/blog/Ambari-metric-collector-connection-timeout","content":"","keywords":""},{"title":"증상​","type":1,"pageTitle":"Ambari metric collector connection timeout","url":"/blog/blog/Ambari-metric-collector-connection-timeout#증상","content":"Ambari 메인화면 에서 리소스 그래프가 로딩중으로 표시되고 출력이 안되었고 /var/log/ambari-server/ambari-server.log 파일을 보면 다음과 같은 에러메세지가 출력이 된다. 18 Mar 2019 22:21:50,455 ERROR [ambari-client-thread-2396] MetricsRequestHelper:115 - Error getting timeline metrics : Read timed out MetricsRequestHelper:122 - Cannot connect to collector: SocketTimeoutException  "},{"title":"해결방안​","type":1,"pageTitle":"Ambari metric collector connection timeout","url":"/blog/blog/Ambari-metric-collector-connection-timeout#해결방안","content":"Ambari Metric Collector 서버를 재시작 $ ambari-metrics-collector restart  Ambari Server가 느려서 그럴수도 있다. Ambari &gt;&gt; Ambari Metrics &gt;&gt; Configs &gt;&gt; Metrics service checkpoint delay 항목을 60초에서 1800 초로 증가 시켰다. Ambari Metric Collector 서버의 메모리 용량을 증가 시켰다.기존의 데이터를 지우고 다시 Ambari Metric Collector 서버를 재시작 한다. a. Ambari metcic server 을 maintenance 모드로 전환시킨다. b. Ambari metcic server 을 중지시킨다. c. Ambari metcic server 의 config 화면에서 다음을 참고한다. i. 'Metrics Service operation mode' (embedded or distributed) ii. hbase.rootdir iii. hbase.zookeeper.property.dataDir d. AMS 서버내부에 hbase.rootdir 내부의 파일들을 백업 및 지운다. - 만약 Metrics Service operation mode 가 embedded 이면 로컬에서 지우고 - distributed 일경우에는 hdfs 을 이용하여 지운다 e. 'hbase.tmp.dir'/zookeeper 폴더안의 내용도 백업 및 지운다. f. 'hbase.tmp.dir'/phoenix-spool 폴더안의 내용도 백업 및 지운다. g. AMS 재 시작 및 maintenance 모드를 헤제 한다. "},{"title":"AMBARI METRICS COLLECTOR 이동법","type":0,"sectionRef":"#","url":"/blog/blog/AMBARI-METRICS-COLLECTOR-이동법","content":"curl -u admin:admin -H &quot;X-Requested-By:ambari&quot; - i -X DELETE http://192.168.1.191:8080/api/v1/clusters/supercom_test/hosts/node04/host_components/METRICS_COLLECTOR 2. 새로운 호스트에 METRICS_COLLECTOR 설치 curl -u admin:admin -H &quot;X-Requested-By:ambari&quot; -i -X POST http://192.168.1.191:8080/api/v1/clusters/supercom_test/hosts/node02/host_components/METRICS_COLLECTOR ","keywords":""},{"title":"manjaro linux(arch linux) 에서 한컴뷰어 설치","type":0,"sectionRef":"#","url":"/blog/blog/arch-linux-에서-한컴뷰어-설치","content":"참고: 아치리눅스 한국사용자 모임 - 한컴뷰어2014 부탁 좀 드려요..최근에 기존에 설치되었던 우분투를 지우고 만자로 리눅스를 설치했다. apt 패키지 매니저 대신 pacman 패키지를 사용하는거 제외하고는 우분투쓰는 느낌이고 업데이트 나오는 시기가 빠르다고 하는데 아직은 모르겠다. 하지만 한컴뷰어를 설치하고자 했지만 유감스럽게도 Fedora 와 Ubuntu 만 제공하고 있어 아치리눅스 기반이 만자로에서는 설치가 제한이 된다. 그러면 한컴뷰어 설치를 포기햐야 하는가? 정답은 그렇지 않다 이다. 다행히 deb 패키지를 arch linux 패키지로 변환이 가능하다. 설치 한컴 뷰어 다운로드deb -&gt; pkg.tar.xz 파일로 변환 debtap hancomoffice-hwpviewer-Ubuntu-amd64.deb 한컴뷰어 설치 sudo pacman -U ./hancomoffice-hwpviewer-9.20.0.1573-1-x86_64.pkg.tar.xz 그런데 webkitgtk 의존성 문제가 발생했다. webkitgtk 을 설치하는데 확인해보니 AUR 로 설치해야 해서 yaourt 로 진행한다. webkitgtk 설치 yaourt -S webkitgtk 설치는 되는거 같은데 .. 소스코드가 많아서 그런지 반나절이 지나도 빌드가 끝나지 않는다. 설치파일을 받아서 진행을 한다. wget https://cdn.repo.archlinuxcn.org/x86_64/webkitgtk-3%3A2.4.11-16-x86_64.pkg.tar.xz sudo pacman -U ./webkitgtk-3_2.4.11-16-x86_64.pkg.tar.xz 다시 3번을 진행하니 설치가 진행이 된다. 그런데 이제는 실행이 안되고 콘솔에서 hwpviewer 을 실행하니 다음에러가 발생했다. hwpviewer: error while loading shared libraries: libicui18n.so.63: cannot open shared object file: No such file or directory 확인해보니 내컴퓨터에서 설치된 icu 패키지 버젼은 64 이고 한컴뷰어에서 요구하는 icu 패키지 버젼이 63인거 같다. 하지만 pacman 에서는 icu 64 로만 설치가된다. AUR 로 설치하자 icu63 설치 yaourt -S icu63 다행히 빌드하는데 오래걸리지는 않았다. 한컴뷰어 실행 hwpviewer 이제야 실행이 된다 {% asset_img &quot;hwpviewer.png&quot; &quot;spaced title&quot; %} 후기 설치하면서 기존의 pacman 도 좋지만 대부분 AUR 을 이용해야만 설치가 진행이 되었다.","keywords":""},{"title":"Ambari View 제작","type":0,"sectionRef":"#","url":"/blog/blog/Ambari-View-제작","content":"Apache Ambari 프로젝트는 Apache Hadoop 클러스터를 프로비저닝, 관리 및 모니터링하는 소프트웨어를 개발하여 Hadoop 관리를 단순화하는 것을 목표로 한다. Ambari는 REST REST API를 통해 직관적이고 사용하기 쉬운 Hadoop 관리 웹 UI를 제공한다.Apache Ambari project Ambari View Ambari Views는 Ambari Web에서 사용자 정의 시각화, 관리 및 모니터링 기능을 표면화하기 위해 UI 기능을 연결하는 체계적인 방법을 제공한다. &quot;보기&quot;는 제3자가 API, 공급자, UI와 함께 새로운 자원 유형을 지원하게 하는 Ambari를 확장하는 방법이다. 즉, 보기는 Ambari 컨테이너에 배치되는 애플리케이션이다. https://cwiki.apache.org/confluence/display/AMBARI/Views 즉 Ambari 에서 별도의 View 화면을 제공해주는 플러그인 이다 제작 절차 STS 우클릭후 New -&gt; Spring Legacy Project 에서 Spring MVC Project 생성 {% asset_img &quot;image1.png&quot; &quot;spaced title&quot; %} pom.xml 파일 설정 &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-jsp&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.easymock&lt;/groupId&gt; &lt;artifactId&gt;easymock&lt;/artifactId&gt; &lt;version&gt;3.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.ambari&lt;/groupId&gt; &lt;artifactId&gt;ambari-views&lt;/artifactId&gt; &lt;version&gt;2.0.0.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt; &lt;artifactId&gt;jersey-server&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;servlet-api&lt;/artifactId&gt; &lt;version&gt;2.5&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-server&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-servlets&lt;/artifactId&gt; &lt;version&gt;${jetty.version}&lt;/version&gt; &lt;/dependency&gt; &lt;!-- Spring --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt; &lt;exclusions&gt; &lt;!-- Exclude Commons Logging in favor of SLF4j --&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-expression&lt;/artifactId&gt; &lt;version&gt;${org.springframework-version}&lt;/version&gt; &lt;/dependency&gt; src/main/resources/view.xml 설정 &lt;view&gt; &lt;!-- ambari name --&gt; &lt;name&gt;AmbariViewTest&lt;/name&gt; &lt;label&gt;Ambari View Test&lt;/label&gt; &lt;version&gt;1.0.0&lt;/version&gt; &lt;min-ambari-version&gt;2.0.*&lt;/min-ambari-version&gt; &lt;!-- ambari config data --&gt; &lt;parameter&gt; &lt;name&gt;ambari.server.url&lt;/name&gt; &lt;description&gt;Enter Ambari Server URL&lt;/description&gt; &lt;placeholder&gt;http://ambari.server:8080&lt;/placeholder&gt; &lt;default-value&gt;http://localhost:8080&lt;/default-value&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;ambari.server.containername&lt;/name&gt; &lt;description&gt;Enter Ambari Container Name&lt;/description&gt; &lt;/parameter&gt; &lt;parameter&gt; &lt;name&gt;ambari.server.username&lt;/name&gt; &lt;description&gt;Enter Ambari Server username&lt;/description&gt; &lt;default-value&gt;admin&lt;/default-value&gt; &lt;/parameter&gt; &lt;!-- ambari view Properties --&gt; &lt;resource&gt; &lt;name&gt;configurations&lt;/name&gt; &lt;service-class&gt;com.test.lustre.dao&lt;/service-class&gt; &lt;/resource&gt; &lt;/view&gt; Spring Web 개발 maven 빌드 mvn clean packge /var/lib/ambari-server/resources/viwes 에 빌드된 파일 이동 ambari 재시작 ambari-server restart 확인","keywords":""},{"title":"AUR(yaourt) 설치 절차 및 debtap","type":0,"sectionRef":"#","url":"/blog/blog/AUR-yaourt-설치-절차","content":"","keywords":""},{"title":"개요​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#개요","content":"debian 패키지를 Arch Linux 에 설치 하기 위해서는 debtap 이 필요하며 이는 AUR 을 이용하여 설치하면 된다. arch linux 특징중에 하나는 유저가 패키지를 만들고 이를 공유할수 있다. 이를 이용하여 여러가지 패키지들을 설치할수 있다. "},{"title":"설치절차​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#설치절차","content":""},{"title":"1. 관련 패키지 설치​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#1-관련-패키지-설치","content":"sudo pacman -S binutils gcc pkgfile sudo pkgfile --update sudo pkgfile strip sudo pacman -S pkg-config sudo pacman -S make sudo pacman -S base-devel  "},{"title":"2. yaourt 설치​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#2-yaourt-설치","content":"git clone https://aur.archlinux.org/yaourt.git cd yaourt makepkg -si  "},{"title":"3. debtap 설치​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#3-debtap-설치","content":"yaourt -S debtap  "},{"title":"4. debtap 으로 패키지 변환하기​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#4-debtap-으로-패키지-변환하기","content":"debtap hancomoffice-hwpviewer-Ubuntu-amd64.deb sudo pacman -U ./hancomoffice-hwpviewer-9.20.0.1573-1-x86_64.pkg.tar.xz  "},{"title":"후기​","type":1,"pageTitle":"AUR(yaourt) 설치 절차 및 debtap","url":"/blog/blog/AUR-yaourt-설치-절차#후기","content":"데비안도 써보고 우분투도 써봤지만 아치리눅스 만큼 업데이트가 빠른 운영체제는 처음본거 같다. "},{"title":"Arrow Function (ES6) 과 Normal Function 의 차이","type":0,"sectionRef":"#","url":"/blog/blog/Arrow-Function-ES6-과-Function-의-차이","content":"기존의 javascript Function 의 this 객체는 java 와 달리 자기 자신이 아니라 호출 방식에 따라 this에 바인딩되는 객체가 달라집니다. this는 전역객체(Global object)에 포함되며 이는 내부함수와 메소드의 내부함수 , 그리고 콜백함수 에서도 this는 외부함수가 아닌 전역객체에 바인딩됩니다. 하지만 Arrow Function 안의 this는 해당 함수를 포함하는 겍체의 this가 됩니다. 또한 Arrow Function(() =&gt; {}) 은 기존 Function 과 달리 new로 호출할 수 없습니다. 따라서 handleClose() 을 넘길때 다음과 같이 bind 을 해서 처리해야 합니다. class Testone extends Component { constructor(props){ super(props); this.state= { } this.handleClose = this.handleClose.bind(this); } handleClose(e){ console.log(e) } handleOpen = (e) =&gt; console.log(e); render() { return ( &lt;Testtow handleClose={this.handleClose} handleOpen={this.handleOpen} &gt; ) } } ","keywords":""},{"title":"Centos7 SELINUX disable 설정후 커널페닉 증상","type":0,"sectionRef":"#","url":"/blog/blog/Centos7-SELINUX-disable-설정후-커널페닉-증상","content":"Centos SELINUX 설정을 비활성화 후에 재부팅시 부팅화면에서 멈추는 현상 원인 /etc/selinux/config 파일에 SELINUXTYPE=disabled 설정되어 있음 해결방안 grub 화면에서 부팅 운영체제를 선택후 e 키를 눌러서 kernel 부팅 옵션으로 들어가서 linux16 / vmlinu 가 있는 부분에 selinux = 0 추가할것 linux16 / vmlinu - 생략 - selinux = 0 완료후에 Ctrl + x 키로 리부트","keywords":""},{"title":"componentDidUpdate() 내부에 setstate() 사용여부","type":0,"sectionRef":"#","url":"/blog/blog/componentDidUpdate-내부에-setstate-사용여부","content":"react.js 을 사용하다 보면 부모 component 에서 prop 값이 변경될때 componentDidUpdate 을 사용하게된다. 하지만 componentDidUpdate 내부에서 setstate() 을 사용할경우 무한 루프에 빠지게 되어 다음과 같은 에러가 발생하게 된다. 이를 해결하기 위해서는 componentDidUpdate 내부에서 setstate() 사용시 if 문을 이용하여 제어해야 한다. * 예시 componentDidUpdate(previousProps, previousState) { if (previousProps.data !== this.props.data) { this.setState({/*....*/}) } } 아니면 componentDidUpdate 대신 componentWillReceiveProps 을 사용하면 된다. componentWillReceiveProps() : 해당 component 에서 mount 하기전에 실행되어 props 을 받음","keywords":""},{"title":"basic auth 구현 및 설명","type":0,"sectionRef":"#","url":"/blog/blog/basic-auth-구현-및-설명","content":"","keywords":""},{"title":"basic auth 이란​","type":1,"pageTitle":"basic auth 구현 및 설명","url":"/blog/blog/basic-auth-구현-및-설명#basic-auth-이란","content":"api 서버에서 데이터을 요구할때 http Authorization 헤더에 user id 와 , password 을 base64 로 인코딩한 문자열을 추가하여 인증하는 형식 참고 : HTTP 기본인증 "},{"title":"구현​","type":1,"pageTitle":"basic auth 구현 및 설명","url":"/blog/blog/basic-auth-구현-및-설명#구현","content":"config 설정 @Autowired private AuthProvider authProvider; @Override /** * 스크링 시큐리트를 통하여 접근페이지 설정 */ protected void configure(HttpSecurity http) throws Exception{ http .logout() .logoutUrl(&quot;/api/logout&quot;) .and() .csrf() .disable() .authorizeRequests() .antMatchers( &quot;/&quot;, &quot;/api/v1/user/join&quot;, &quot;/static/**&quot; ).permitAll() .anyRequest().authenticated() .and() .headers().frameOptions().sameOrigin() .and() .httpBasic() .authenticationEntryPoint(new NoPopupBasicAuthenticationEntryPoint()) ; http.authenticationProvider(authProvider); } http.authenticationProvider 부분에 authProvider 추가 AuthProvider.java package com.jeaeok.myproject.testApp.configs; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.Authentication; import org.springframework.security.core.AuthenticationException; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Component; import com.jeaeok.myproject.testApp.domain.MyAuthenticaion; import com.jeaeok.myproject.testApp.domain.User; import com.jeaeok.myproject.testApp.services.UserService; @Component(&quot;authProvider&quot;) /** * 로그인 확인 하는 클레스 * @author atcis * */ public class AuthProvider implements AuthenticationProvider { @Autowired private PasswordEncoder passwordEncoder; @Autowired private UserService userService; @Override public Authentication authenticate(Authentication authentication) throws AuthenticationException { String id = authentication.getName(); String password = authentication.getCredentials().toString(); User user_info = userService.getUser(id); if (null == user_info || !passwordEncoder.matches(password, user_info.getUserPassword())) { return null; } List&lt;GrantedAuthority&gt; grantedAuthorityList = new ArrayList&lt;&gt;(); if (user_info.isAdmin()) { grantedAuthorityList.add(new SimpleGrantedAuthority(&quot;ROLE_USER&quot;)); } return new MyAuthenticaion(id, password, grantedAuthorityList, user_info); } @Override public boolean supports(Class&lt;?&gt; authentication) { return authentication.equals(UsernamePasswordAuthenticationToken.class); } } authentication.getName() : basic auth 부분에 id authentication.getCredentials().toString() : basic auth 부분에 password basic auth 은 base64 로 인코딩 되어 전송되기 때문에 중간자 공격에 취약할수도 있음 "},{"title":"css margin, padding 한줄에 적을 때 순서","type":0,"sectionRef":"#","url":"/blog/blog/css-margin-padding-한줄에-적을-때-순서","content":"계속 사용하지만 기억이 안나서 따로 적는다. padding 도 동일하다. margin: [margin-top] [margin-right] [margin-bottom] [margin-left]; margin: [margin-top] [margin-left = margin-right] [margin-bottom]; margin: [margin-top=margin-bottom] [margin-left = margin-right]; margin: [margin-top = margin-bottom = margin-left = margin-right]; 순서는 상 하 좌 우 이니 참고하자","keywords":""},{"title":"docker service log 보기","type":0,"sectionRef":"#","url":"/blog/blog/docker-service-log-보기","content":"journalctl -u docker.service ","keywords":""},{"title":"docker remote port open (docker 원격 API 활성화)","type":0,"sectionRef":"#","url":"/blog/blog/docker-remote-port-open-docker-원격-API-활성화","content":"","keywords":""},{"title":"1. /lib/systemd/system/docker.service 내용 수정​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/docker-remote-port-open-docker-원격-API-활성화#1-libsystemdsystemdockerservice-내용-수정","content":"[Service] EnvironmentFile=/etc/default/docker ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS  "},{"title":"2. /etc/default/docker 내용 수정​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/docker-remote-port-open-docker-원격-API-활성화#2-etcdefaultdocker-내용-수정","content":"DOCKER_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&quot;  "},{"title":"3. docker 리로드 및 재시작​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/docker-remote-port-open-docker-원격-API-활성화#3-docker-리로드-및-재시작","content":"systemctl daemon-reload service docker restart  "},{"title":"4. 테스트​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/docker-remote-port-open-docker-원격-API-활성화#4-테스트","content":"curl http://localhost:2375/version {&quot;Platform&quot;:{&quot;Name&quot;:&quot;Docker Engine - Community&quot;},&quot;Components&quot;:[{&quot;Name&quot;:&quot;Engine&quot;,&quot;Version&quot;:&quot;18.09.2&quot;,&quot;Details&quot;:{&quot;ApiVersion&quot;:&quot;1.39&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;BuildTime&quot;:&quot;2019-02-10T03:42:13.000000000+00:00&quot;,&quot;Experimental&quot;:&quot;false&quot;,&quot;GitCommit&quot;:&quot;6247962&quot;,&quot;GoVersion&quot;:&quot;go1.10.6&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-45-generic&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;Os&quot;:&quot;linux&quot;}}],&quot;Version&quot;:&quot;18.09.2&quot;,&quot;ApiVersion&quot;:&quot;1.39&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;GitCommit&quot;:&quot;6247962&quot;,&quot;GoVersion&quot;:&quot;go1.10.6&quot;,&quot;Os&quot;:&quot;linux&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-45-generic&quot;,&quot;BuildTime&quot;:&quot;2019-02-10T03:42:13.000000000+00:00&quot;}  "},{"title":"DTO를 이너 클래스로 관리하기","type":0,"sectionRef":"#","url":"/blog/blog/DTO를-이너-클래스로-관리하기","content":"","keywords":""},{"title":"Goal​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#goal","content":"DTO를 이너클래스로 관리해 개발 편의성을 올려봅니다.도메인 클래스안에 DTO를 이너클래스로 두는것이 설계상 괜찮은지에 대해서 고민해봅니다.  "},{"title":"요청별로 DTO를 외부 클래스로 나누어 관리하는 경우​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#요청별로-dto를-외부-클래스로-나누어-관리하는-경우","content":"너무 많은 DTO 클래스가 생겨 관리가 힘들어질 수 있습니다. @Getter @NoArgsConstructor(access = AccessLevel.PROTECTED) @Entity public class Member { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String name; public Member(final String name) { this.name = name; } }  만약 Member라는 도메인 클래스가 있다고 해봅시다. @Getter @AllArgsConstructor @NoArgsConstructor public class MemberCreateRequest { private String name; } @Getter @AllArgsConstructor public class MemberCreateResponse { private Long id; private String name; }  이때 Member를 create하는 기능이 필요할시, MemberCreateRequest, MemberCreateResponse 벌써 두개의 DTO 클래스가 필요해집니다.지금은 단순히 2개이지만, 여러 DTO가 계속 필요해지는 상황이 온다면 MemberxxxRequest 이런 DTO 클래스가 점점 늘어나게 되어 DTO를 선별하고 구분하는데 인적 리소스가 소모되게 될것입니다.  과거 진행한 프로젝트의 수많은 DTO 클래스들...  "},{"title":"DTO를 이너 클래스로 관리​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#dto를-이너-클래스로-관리","content":"DTO를 관리하는 (인적)비용이 줄어듭니다. @Getter @NoArgsConstructor(access = AccessLevel.PROTECTED) @Entity public class Member { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; private String name; public Member(final String name) { this.name = name; } @Getter @AllArgsConstructor @NoArgsConstructor public static class Request { private String name; } @Getter @AllArgsConstructor public static class Response { private Long id; private String name; } }  위처럼 이너 클래스를 이용해, Member안에 Request와 Response DTO를 가지게 있게 한다면 어떻게 될까요.Member 클래스만 보고 관련된 DTO를 빠르게 찾을 수 있게되어, 인적 리소스가 줄어들고 개발의 편의성이 늘어나게 됩니다. @RestController @RequestMapping(&quot;/api/member&quot;) public class MemberController { @GetMapping(&quot;/{id}&quot;) public ResponseEntity&lt;Member.Response&gt; getMember(@PathVariable final Long id) { return ResponseEntity.ok(new Member.Response(id, &quot;unluckyjung&quot;)); } @PostMapping public ResponseEntity&lt;Member.Response&gt; create(@RequestBody final Member.Request request) { //...저장 로직 return ResponseEntity.created(URI.create(String.format(&quot;/api/member/%d&quot;, 1L))) .body(new Member.Response(1L, request.getName())); } }  이너클래스를 요청, 응답을 처리하는 컨트롤러 예제를 간단하게 작성하면, 위와 같이 구현할 수 있게 됩니다.(위 예제가 실제 개발에서 적용되는 방식은 아닙니다. 단순히 이해를 쉽기 위해서 작성한 예제일 뿐입니다.)  "},{"title":"고민되는 사항​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#고민되는-사항","content":"도메인이 DTO의 형태를 알고 있게 되는건 아닐까? 둘의 결합도가 높아지는건 아닐까? DTO를 도메인 객체와 분리해서 사용하는 이유는, DTO는 변경이 찾지만 도메인 객체는 그렇지 않습니다. 따라서 도메인을 DTO로 사용하는것은 변경이 잦은 형태에 의존성을 띠고 있는 형태가 되어, 올바르지 못한 설계가 되기때문에 도메인과 DTO 두개를 분리하는것 입니다.하지만, 위와같이 도메인(엄밀하게 따지면 엔티티이지만, 도메인으로 하겠습니다.) 객체가 DTO를 이너클래스로 가지고 있는 형태는 도메인이 DTO를 알고 있는 형태가 되어, 잘못된 설계가 아닌가? 라는 생각이 순간들었습니다. 결론적으로는 위의 예시와같은 형태는 괜찮다라고 생각합니다. 의존성을 띠고 있는 형태라 함은 Domain 객체의 로직에 DTO가 영향을 주게 되는것을 뜻하는것이라고 생각합니다.하지만 위와 같은 이너클래스 형태는 단순히 도메인 클래스안에 DTO 클래스를 들고만 있지, DTO 와 도메인의 로직에는 전혀 영향이 없는 형태입니다. 즉 로직이나 상태에 따른 의존성이 있는 형태는 아닌거죠.도메인 &lt;-&gt; DTO 끼리 연관이 생긴다는것보다는, 해당 도메인과 관련된 DTO를 같이 묶어두기 위한 정도인거죠.즉, 편의성을 위해서 도메인내에 이너 클래스를 묶어서 사용하는것이기 때문에 다른 시야로 봐야한다고 결론 내렸습니다.물론 여러 도메인들이 합쳐져서 만들어지는 DTO 라면, 한 도메인의 이너클래스로 DTO를 사용하면 안되겠죠. "},{"title":"장점​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#장점","content":"응집도가 높아지는 효과가 있습니다. 위에서 말한 여러 도메인들이 합쳐져서 만들어지는 DTO 는 이너클래스로 사용하지 않는다. 라는 룰을 지킨다면개발자 입장에서 이너클래스의 DTO를 보았을때 이너 클래스 DTO는 해당 클래스 안에서만 한정적으로 사용한다는 의미를 부여할 수 있어, 응집력이 높아지고 개발자들이 신경써야 하는 외부클래스의 개수가 줄어들어 개발 편의성을 높이는 효과를 나타낼 수 있다고 생각합니다.  "},{"title":"Conclusion​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#conclusion","content":"이너클래스를 이용해 DTO 관리의 편의성을 높일 수 있다.하지만 이너클래스로 만들어진 DTO는, 속해 있는 도메인 클래스로만 구성되는 경우에 사용해야한다.  "},{"title":"Reference​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#reference","content":"https://www.inflearn.com/questions/47205https://velog.io/@ausg/Spring-Boot%EC%97%90%EC%84%9C-%EA%B9%94%EB%81%94%ED%95%98%EA%B2%8C-DTO-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0 "},{"title":"출처​","type":1,"pageTitle":"DTO를 이너 클래스로 관리하기","url":"/blog/blog/DTO를-이너-클래스로-관리하기#출처","content":"DTO를 inner class로 관리하기 (https://unluckyjung.github.io/dev/2022/02/20/Dto-InnerClass/) "},{"title":"elementary OS 에서 이클립스 멈춤현상","type":0,"sectionRef":"#","url":"/blog/blog/elementary-OS에서-이클립스-멈춤현상","content":"이클립스를 elementary OS 에서 실행하고자 하면 이클립스 실행중으로 나오고 작동이 안된다. 원인 elementary OS 에서 쓰이는 GTK3 와 이클립스에 사용중인 GTK2이 충돌나서 그런것 같다 해결 eclipse.ini 파일에 다음을 추가한다 --launcher.GTK_version ","keywords":""},{"title":"Docker 이미지 저장 경로 변경하는 방법","type":0,"sectionRef":"#","url":"/blog/blog/Docker-이미지-저장-경로-변경하는-방법","content":"/etc/default/docker 파일내용을 다음과 같이 수정 DOCKER_OPTS=&quot;--dns 8.8.8.8 -g &lt;YOUR_DIR&gt;&quot; 예시) # Docker Upstart and SysVinit configuration file # # THIS FILE DOES NOT APPLY TO SYSTEMD # # Please see the documentation for &quot;systemd drop-ins&quot;: # https://docs.docker.com/engine/admin/systemd/ # # Customize location of Docker binary (especially for development testing). #DOCKERD=&quot;/usr/local/bin/dockerd&quot; # Use DOCKER_OPTS to modify the daemon startup options. DOCKER_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4 -g /mnt&quot; # If you need Docker to use an HTTP proxy, it can also be specified here. #export http_proxy=&quot;http://127.0.0.1:3128/&quot; # This is also a handy place to tweak where Docker's temporary files go. #export DOCKER_TMPDIR=&quot;/mnt/bigdrive/docker-tmp&quot; /lib/systemd/system/docker.service 파일내용을 다음과 같이 수정 EnvironmentFile=/etc/default/docker ExecStart=/usr/bin/dockerd -H unix:// $DOCKER_OPTS 예시) [Service] Type=notify # the default is not to use systemd for cgroups because the delegate issues still # exists and systemd currently does not support the cgroup feature set required # for containers run by docker #ExecStart=/usr/bin/dockerd -H unix:// EnvironmentFile=/etc/default/docker ExecStart=/usr/bin/dockerd -H unix:// $DOCKER_OPTS ExecReload=/bin/kill -s HUP $MAINPID TimeoutSec=0 RestartSec=2 docker 서비스 리로딩 및 재시작 service docker stop sudo systemctl daemon-reload service docker start ","keywords":""},{"title":"freebsd 에서 게스트확장 설치하기","type":0,"sectionRef":"#","url":"/blog/blog/freebsd-에서-게스트확장-설치하기","content":"","keywords":""},{"title":"1. vbox guest additions 설치하기​","type":1,"pageTitle":"freebsd 에서 게스트확장 설치하기","url":"/blog/blog/freebsd-에서-게스트확장-설치하기#1-vbox-guest-additions-설치하기","content":"$ pkg install virtualbox-ose-additions  "},{"title":"2. /etc/X11/xorg.conf 파일 설정​","type":1,"pageTitle":"freebsd 에서 게스트확장 설치하기","url":"/blog/blog/freebsd-에서-게스트확장-설치하기#2-etcx11xorgconf-파일-설정","content":"$ vim /etc/X11/xorg.conf  Section &quot;Device&quot; Identifier &quot;Card0&quot; Driver &quot;vboxvideo&quot; VendorName &quot;InnoTek Systemberatung GmbH&quot; BoardName &quot;VirtualBox Graphics Adapter&quot; EndSection Section &quot;InputDevice&quot; Identifier &quot;Mouse0&quot; Driver &quot;vboxmouse&quot; EndSection  "},{"title":"3. /etc/rc.conf 파일 설정​","type":1,"pageTitle":"freebsd 에서 게스트확장 설치하기","url":"/blog/blog/freebsd-에서-게스트확장-설치하기#3--etcrcconf-파일-설정","content":"$ vim /etc/rc.conf  /etc/rc.conf 파일에 다음과 내용 추가 vboxguest_enable=&quot;YES&quot; vboxservice_enable=&quot;YES&quot;  "},{"title":"4. reboot 후 확인​","type":1,"pageTitle":"freebsd 에서 게스트확장 설치하기","url":"/blog/blog/freebsd-에서-게스트확장-설치하기#4-reboot-후-확인","content":"$ reboot   참고 : freebsd handbook - 21.5. FreeBSD as a Guest on VirtualBox "},{"title":"git pull시 'fatal: 관계 없는 커밋 내역의 병합을 거부합니다' 발생시","type":0,"sectionRef":"#","url":"/blog/blog/git-pull시-fatal-관계-없는-커밋-내역의-병합을-거부합니다-발생시","content":"","keywords":""},{"title":"해결방안​","type":1,"pageTitle":"git pull시 'fatal: 관계 없는 커밋 내역의 병합을 거부합니다' 발생시","url":"/blog/blog/git-pull시-fatal-관계-없는-커밋-내역의-병합을-거부합니다-발생시#해결방안","content":"$ git fetch --all $ git reset --hard origin/master $ git pull origin master  git fetch --all : git remote 에서 전체 내용을 받아온다.git reset --hard origin/master : 수정된 내역을 지우고 이전내용으로 복구한다.git pull origin master : 현재 작업하고있는 로컬에 커밋을 병합한다. "},{"title":"freebsd 에서 gui 환경 셋팅하기","type":0,"sectionRef":"#","url":"/blog/blog/freebsd-에서-gui-환경-셋팅하기","content":"","keywords":""},{"title":"1. install gnome3​","type":1,"pageTitle":"freebsd 에서 gui 환경 셋팅하기","url":"/blog/blog/freebsd-에서-gui-환경-셋팅하기#1-install-gnome3","content":"$ pkg install gnome3  "},{"title":"2. fstab 파일 설정​","type":1,"pageTitle":"freebsd 에서 gui 환경 셋팅하기","url":"/blog/blog/freebsd-에서-gui-환경-셋팅하기#2-fstab-파일-설정","content":"/etc/fstab 파일에 내용추가 proc /proc procfs rw 0 0  "},{"title":"3. rc.conf 파일설정​","type":1,"pageTitle":"freebsd 에서 gui 환경 셋팅하기","url":"/blog/blog/freebsd-에서-gui-환경-셋팅하기#3-rcconf-파일설정","content":"dbus_enable=&quot;YES&quot; hald_enable=&quot;YES&quot; gdm_enable=&quot;YES&quot; gnome_enable=&quot;YES&quot;  "},{"title":"4. 재부팅후 확인​","type":1,"pageTitle":"freebsd 에서 gui 환경 셋팅하기","url":"/blog/blog/freebsd-에서-gui-환경-셋팅하기#4-재부팅후-확인","content":"$ reboot   참고 : freebsd handbook - 5.7. Desktop Environments "},{"title":"Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json: dial unix /var/run/docker.sock: connect: permission denied","type":0,"sectionRef":"#","url":"/blog/blog/Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-var-run-docker-sock-Get-http-2Fvar-2Frun-2Fdocker-sock-v1-40-containers-json-dial-unix-var-run-docker-sock-connect-permission-denied","content":"docker가 root 계정으로 설치 되었을때 root 계정이 아닌 계정으로 docker를 실행하고자 하면 제목과 같은 에러가 발생할 때가 있다. $ sudo usermod -a -G docker $USER $ sudo service docker restart ","keywords":""},{"title":"Hbase RegionServer 가 시간마다 셧다운될때","type":0,"sectionRef":"#","url":"/blog/blog/Hbase-RegionServer-가-시간마다-셧다운될때","content":"","keywords":""},{"title":"원인 : 시간 동기화 문제​","type":1,"pageTitle":"Hbase RegionServer 가 시간마다 셧다운될때","url":"/blog/blog/Hbase-RegionServer-가-시간마다-셧다운될때#원인--시간-동기화-문제","content":"로그에 다음과같은 에러 메세지 출력 2018-02-06 22:17:06,598 INFO [regionserver/node04/192.168.1.194:16020] regionserver.HRegionServer: STOPPED: Unhandled: org.apache.hadoop.hbase.ClockOutOfSyncException: Server node04,16020,1517973362638 has been rejected; Reported time is too far out of sync with master. Time difference of 37329ms &gt; max allowed of 30000ms  "},{"title":"각 노드마다 시간 동기화 필요​","type":1,"pageTitle":"Hbase RegionServer 가 시간마다 셧다운될때","url":"/blog/blog/Hbase-RegionServer-가-시간마다-셧다운될때#각-노드마다-시간-동기화-필요","content":""},{"title":"gitlab docker root password reset","type":0,"sectionRef":"#","url":"/blog/blog/gitlab-docker-root-password-reset","content":"","keywords":""},{"title":"초기화​","type":1,"pageTitle":"gitlab docker root password reset","url":"/blog/blog/gitlab-docker-root-password-reset#초기화","content":"docker console 접속 $ docker exec -it gitlab /bin/bash Ruby on Rails console 접속 $ gitlab-rails console production root 유저 설정으로 접속 irb(main):006:0&gt; user = User.where(id: 1).first or irb(main):006:0&gt; user = User.find_by(email: 'admin@example.com') 패스워드 초기화 irb(main):006:0&gt; user.password = 'secret_pass' irb(main):006:0&gt; user.password_confirmation = 'secret_pass' 저장 irb(main):006:0&gt; user.save!  "},{"title":"hexo -> notion 으로 데이터 이전중 입니다.","type":0,"sectionRef":"#","url":"/blog/blog/hexo-notion-으로-데이터-이전중-입니다","content":"ㅈㄱㄴ","keywords":""},{"title":"hexo password 설정","type":0,"sectionRef":"#","url":"/blog/blog/hexo-password-설정","content":"hexo-blog-encrypt 모듈 설치 $ npm install --save hexo-blog-encrypt _config.yml 에 다음항목 추가 encrypt: enable: true post 상단에 다음 항목추가 --- password: mikemessi abstract: Welcome to my blog, enter password to read. message: Welcome to my blog, enter password to read. --- ","keywords":""},{"title":"hexo tags 페이지 생성","type":0,"sectionRef":"#","url":"/blog/blog/hexo-tags-페이지-생성","content":"hexo new page &quot;tags&quot; source/tags/index.md header 수정 --- title: Tags date: 2018-12-27 00:55:17 type: tags --- ","keywords":""},{"title":"hexo 에서 html 문서 계시하기","type":0,"sectionRef":"#","url":"/blog/blog/hexo-에서-html-문서-계시하기","content":"hexo 에서 마크다운형식으로 페이지를 만들지만 가끔씩 마크다운 문서가 아닌 html 문서로 계시해야 할 경우가 발생한다. 그럴경우 html 문서 상단에 다음과 같은 태그를 추가한다. --- title: ppts date: 2019-02-17 20:08:57 layout: false --- 하지만 css, js 파일은 인식이 안되어서 cdn 을 통하여 직접 임포트를 해야하는것 같다.","keywords":""},{"title":"hexo 에서 페이지가 깨질때","type":0,"sectionRef":"#","url":"/blog/blog/hexo-에서-페이지가-깨질때","content":"","keywords":""},{"title":"증상​","type":1,"pageTitle":"hexo 에서 페이지가 깨질때","url":"/blog/blog/hexo-에서-페이지가-깨질때#증상","content":"hexo 에서 hexo deploy 을 실행후 다음과 같은 에러 발생 "},{"title":"원인​","type":1,"pageTitle":"hexo 에서 페이지가 깨질때","url":"/blog/blog/hexo-에서-페이지가-깨질때#원인","content":"이전의 deploy 할때의 css 파일이 남아서 생긴문제 "},{"title":"해결​","type":1,"pageTitle":"hexo 에서 페이지가 깨질때","url":"/blog/blog/hexo-에서-페이지가-깨질때#해결","content":"다음 명령어 입력 $ hexo clean $ hexo deploy  입력후 정상적으로 동작확인 "},{"title":"How to Disable SELinux on CentOS 7","type":0,"sectionRef":"#","url":"/blog/blog/How-to-Disable-SELinux-on-CentOS-7","content":"SELinux(Security Enhanced Linux)는 관리자와 사용자가 액세스 제어에 대한 제어력을 높일 수 있는 Linux 커널 보안 모듈이다. SELinux 정책 규칙에 따라 접속할 수 있다. SELinux 정책 규칙은 프로세스와 사용자가 파일과 상호 작용하는 방법뿐만 아니라 프로세스와 사용자가 서로 상호작용하는 방법을 지정한다. 파일을 여는 프로세스처럼 액세스를 특별히 허용하는 SELinux 정책 규칙이 없는 경우, 액세스가 거부된다. Disable SELinux SELinux mode 변경 sudo setenforce 0 /etc/selinux/config 변경 SELINUX 항목을 disabled로 변경 # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=disabled # SELINUXTYPE= can take one of these two values: # targeted - Targeted processes are protected, # mls - Multi Level Security protection. SELINUXTYPE=targeted Server reboot","keywords":""},{"title":"java.io.IOException: com.jcraft.jsch.JSchException: invalid privatekey: [B@24a1c17f jsch 오류발생","type":0,"sectionRef":"#","url":"/blog/blog/java-io-IOException-com-jcraft-jsch-JSchException-invalid-privatekey-B-24a1c17f-jsch-오류발생","content":"jsch 운영간에 다음과 같은 에러발생 Caused by: com.jcraft.jsch.JSchException: invalid privatekey: [B@24a1c17f at com.jcraft.jsch.KeyPair.load(KeyPair.java:902) at com.jcraft.jsch.KeyPair.load(KeyPair.java:543) at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:40) at com.jcraft.jsch.JSch.addIdentity(JSch.java:393) at com.jcraft.jsch.JSch.addIdentity(JSch.java:353) at com.jcabi.ssh.SSH.session(SSH.java:261) 원인 jsch 에서 연동되는 .ssh/id_rsa 파일형식이 잘못되었다.cat ~/.ssh/id_rsa 파일을 확인하면 다음과 같이 출력 -----BEGIN OPENSSH PRIVATE KEY----- ........ ........ ........ -----END OPENSSH PRIVATE KEY----- 조치사항 ssh-keygen 으로 키을 생성할때 다음과 같은 옵셥추가 $ ssh-keygen -m PEM ","keywords":""},{"title":"java 랜덤 문자열 생성","type":0,"sectionRef":"#","url":"/blog/blog/java-랜덤-문자열-생성","content":"pom.xml 추가 &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;/dependency&gt; 랜덤 문자열 생성 : 알파벳 랜덤 5개 생성 RandomStringUtils.randomAlphabetic(5) 랜덤 문자열 생성 : 숫자포함 알파벳 랜덤 5개 생성 RandomStringUtils.randomAlphanumeric(5) 랜덤 문자열 생성 : 아스키 코드 랜덤 5개 생성 RandomStringUtils.randomAscii(5) ","keywords":""},{"title":"linux 에서 vscode-chrome-debug 설정하기","type":0,"sectionRef":"#","url":"/blog/blog/linux-에서-vscode-chrome-debug-설정하기","content":"launch.json 에서 다음과 같이 수정 { // IntelliSense를 사용하여 가능한 특성에 대해 알아보세요. // 기존 특성에 대한 설명을 보려면 가리킵니다. // 자세한 내용을 보려면 https://go.microsoft.com/fwlink/?linkid=830387을(를) 방문하세요. &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;type&quot;: &quot;chrome&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Launch Chrome against localhost&quot;, &quot;url&quot;: &quot;http://localhost:3000&quot;, &quot;webRoot&quot;: &quot;${workspaceFolder}/src&quot;, &quot;runtimeExecutable&quot;: &quot;/usr/bin/google-chrome-stable&quot;, &quot;runtimeArgs&quot;: [ &quot;--new-window&quot;, &quot;-user-data-dir=\\&quot;/${workspaceFolder}/DevProfile\\&quot;&quot;, &quot;--remote-debugging-port=9222&quot;, &quot;--disable-background-networking&quot; ] } ] } runtimeExecutable 에 들어갈 chrome 위치 확인하기 whereis google-chrome-stable ","keywords":""},{"title":"java spark wordcount examples","type":0,"sectionRef":"#","url":"/blog/blog/java-spark-wordcount-examples","content":"pom.xml 설정 &lt;dependency&gt; &lt;groupId&gt;org.apache.spark&lt;/groupId&gt; &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt; &lt;version&gt;2.4.3&lt;/version&gt; &lt;/dependency&gt; . . . &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;addClasspath&gt;true&lt;/addClasspath&gt; &lt;classpathPrefix&gt;lib/&lt;/classpathPrefix&gt; &lt;mainClass&gt;com.geekcap.javaworld.sparkexample.WordCount&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy&lt;/id&gt; &lt;phase&gt;install&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-dependencies&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;${project.build.directory}/lib&lt;/outputDirectory&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; java example SparkConf sparkConf = new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;JD Word Counter&quot;); JavaSparkContext sc = new JavaSparkContext(sparkConf); JavaRDD&lt;String&gt; textFile = sc.textFile(&quot;text.txt&quot;); JavaPairRDD&lt;String, Integer&gt; counts = textFile .flatMap(s -&gt; Arrays.asList(s.split(&quot; &quot;)).iterator()) .mapToPair(word -&gt; new Tuple2&lt;&gt;(word, 1)) .reduceByKey((a, b) -&gt; a + b); counts.saveAsTextFile(&quot;wordcouter&quot;); ","keywords":""},{"title":"locale.Error: unsupported locale setting","type":0,"sectionRef":"#","url":"/blog/blog/locale-Error-unsupported-locale-setting","content":"Traceback (most recent call last): File &quot;/bin/pip&quot;, line 9, in &lt;module&gt; load_entry_point('pip==8.1.1', 'console_scripts', 'pip')() File &quot;/usr/lib/python2.7/site-packages/pip-8.1.1-py2.7.egg/pip/__init__.py&quot;, line 215, in main locale.setlocale(locale.LC_ALL, '') File &quot;/usr/lib64/python2.7/locale.py&quot;, line 547, in setlocale return _setlocale(category, locale) locale.Error: unsupported locale setting 해결책 export LC_ALL=&quot;en_US.UTF-8&quot; export LC_CTYPE=&quot;en_US.UTF-8&quot; ","keywords":""},{"title":"manjaro 에서 pacman 이용시 pgp 에러 발생시","type":0,"sectionRef":"#","url":"/blog/blog/manjaro-에서-pacman-이용시-pgp-에러-발생시","content":"pacman -Syyu 입력시 다음 에러가 발생할경우 $ pacman -Syyu error: fzf: signature from &quot;Ambrevar &lt;ambrevar@gmail.com&gt;&quot; is unknown trust :: File /var/cache/pacman/pkg/fzf-0.17.0.2-1-x86_64.pkg.tar.xz is corrupted (invalid or corrupted package (PGP signature)). 다음 명령어로 해결한다. sudo pacman-key --refresh-keys 다음 에러가 추가 발생시 $ sudo pacman -Syu error: GPGME error: No data error: GPGME error: No data error: GPGME error: No data error: GPGME error: No data 다음 명령어를 입력한다. sudo pacman -Sy archlinux-keyring manjaro-keyring sudo pacman-key --populate archlinux manjaro 다음에 다시한번 확인한다. sudo pacman -Syyu 원인은 자세하게 확인해봐야 하겠지만 업데이트 서버에 있는 서명과 내노트북에 있는 서명값이 달라서 생긴것 같다.","keywords":""},{"title":"Lombok을 이용해 Builder 패턴을 만들어보자.","type":0,"sectionRef":"#","url":"/blog/blog/Lombok을-이용해-Builder-패턴을-만들어보자","content":"Builder 패턴이란? Effective Java 규칙 2 - 조슈아 블로그 생성자에 인자가 많을 때는 빌더 패턴을 고려하라 빌더 패턴(Builder pattern) 이란 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다. (출처: 위키백과) 난 생성자가 많아지면 빌더 패턴을 만드는 편인데, 개발자 성향에 따라 다를수도 있구나를 느꼈다. 빌더패턴을 활용하면 어떤 필드에 어떤 인자를 넣어줬는지 명확히 알 수 있고, 넣어줄 필요 없는 필드(null)는 굳이 선언할 필요 없으니 좋다고 생각했다. 근데 다른 분은 어떤 필드에 null이 들어간다는걸 명확히 볼 수 있는 점 때문에 생성자를 통해 객체를 생성하시는 방법을 택했다고 하셨다. intelliJ는 들어갈 필드의 값을 표시해주는 기능이 있어서 생성자를 통해 객체를 생성해도 어떤 필드를 넣어줘야하는지 보인다. 첫 회사에서는 STS를 썼기 때문에 intelliJ의 다양한 기능적인 혜택을 누리지 못했기도 해서 빌더 패턴이 유용했다. 코틀린을 사용할 경우에는.... 굳이 빌더 패턴을 쓸 필요가 없을 것 같다 싶었던 이유가 생성자 인자에 필드 명도 함께 표기할 수 있다. // 예시 fun foo() { val member = Member(name = &quot;zorba&quot;, job = &quot;developer&quot;) } 하지만, java를 쓸 때는 자주 사용하는 디자인 패턴이다. 빌더 패턴의 장점 객체들마다 들어가야할 인자가 각각 다를 때 유연하게 사용할 수 있다. 무조건 setter 생성을 방지하고 불변객체로 만들 수 있다. 필수 argument를 지정할 수 있다.(보통의 경우, PK 역할을 할 Id 값이 될 것이다.) Builder 패턴은 어떻게 작성하나? 이 페이지를 들어가면 명확하게 빌더 패턴을 어떻게 작성해야하는지 알 수 있다. 빌더 패턴 예제코드 Java 사용자라면 잘 아는 StringBuilder가 이 빌더 패턴으로 작성된 라이브러리다. 근데 클래스를 만들 때마다 이 기나긴 코드를 짜기 불편하다! 그래서 Java 개발자들의 보일러플레이트 코드를 획기적으로 줄여준 라이브러리인 Lombok을 활용해보자. 바로 @Builder 애노테이션 을 사용하면 예제코드처럼 긴 코드를 작성하지 않아도 된다. Builder 패턴을 적용할 클래스 @AllArgsConstructor(access = AccessLevel.PRIVATE) @Builder(builderMethodName = &quot;travelCheckListBuilder&quot;) @ToString public class TravelCheckList { private Long id; private String passport; private String flightTicket; private String creditCard; private String internationalDriverLicense; private String travelerInsurance; public static TravelCheckListBuilder builder(Long id) { if(id == null) { throw new IllegalArgumentException(&quot;필수 파라미터 누락&quot;); } return travelCheckListBuilder().id(id); } } 확인용 클래스 public class MainClass { public static void main(String[] args) { // 빌더패턴을 통해 어떤 필드에 어떤 값을 넣어주는지 명확히 눈으로 확인할 수 있다! TravelCheckList travelCheckList = TravelCheckList.builder(145L) .passport(&quot;M12345&quot;) .flightTicket(&quot;Paris flight ticket&quot;) .creditCard(&quot;Shinhan card&quot;) .internationalDriverLicense(&quot;1235-5345&quot;) .travelerInsurance(&quot;Samsung insurance&quot;) .build(); System.out.println(&quot;빌더 패턴 적용하기 : &quot; + travelCheckList.toString()); } // 결과 // 빌더 패턴 적용하기 : TravelCheckList(id=1, passport=M12345, flightTicket=Paris flight ticket, creditCard=Shinhan card, internationalDriverLicense=1235-5345, travelerInsurance=Samsung insurance) } @AllArgsConstructor(access = AccessLevel.PRIVATE) : @Builder 애노테이션을 선언하면 전체 인자를 갖는 생성자를 자동으로 만든다. @AllArgsConstructor는 전체 인자를 갖는 생성자를 만드는데, 접근자를 private으로 만들어서 외부에서 접근할 수 없도록 만든다. @Builder : 위에서 설명했던 Builder 패턴을 자동으로 생성해주는데, builderMethodName에 들어간 이름으로 빌더 메서드를 생성해준다. 나같은 경우, 혼동을 줄이기 위해 클래스 명과 동일하게 놔두고 Builder로 선언했다. 클래스 내부 builder 메서드 : 필수로 들어가야할 필드들을 검증하기 위해 만들었다. 꼭 id가 아니라도 해당 클래스를 객체로 생성할 때 필수적인 필드가 있다면 활용할 수 있다. 이렇게 Lombok을 활용하면 반복적으로 길게 짜야하는 코드(보일러 플레이트 코드)를 엄청나게 줄여줄 수 있다. 빌더 패턴을 사용하면서 무분별한 setter를 남용한다면.... 빌더패턴의 장점을 극대화해서 사용하는 건 아닌 것 같다.","keywords":""},{"title":"markdown 문서에서 word 문서로 변환","type":0,"sectionRef":"#","url":"/blog/blog/markdown-문서에서-word-문서로-변환","content":"","keywords":""},{"title":"markdown 문서 -> 워드형식으로 변환​","type":1,"pageTitle":"markdown 문서에서 word 문서로 변환","url":"/blog/blog/markdown-문서에서-word-문서로-변환#markdown-문서---워드형식으로-변환","content":"markdown 문서를 작성하다가 워드형식으로 문서가 필요했고 마크다운에서 복붙하기에는 양식이 깨져서 문제가 있었다. 해결방안을 찾다가 pandoc 이라는 것을 찾아서 적용하기로 했다. "},{"title":"설치​","type":1,"pageTitle":"markdown 문서에서 word 문서로 변환","url":"/blog/blog/markdown-문서에서-word-문서로-변환#설치","content":"$ sudo pacman -S pandoc  지금 사용하는 리눅스는 manjaro 이니 설치한 리늑스에 맞추어서 사용하면 된다. "},{"title":"변환​","type":1,"pageTitle":"markdown 문서에서 word 문서로 변환","url":"/blog/blog/markdown-문서에서-word-문서로-변환#변환","content":"$ pandoc README.md -f markdown -t docx -s -o README.docx  "},{"title":"참고​","type":1,"pageTitle":"markdown 문서에서 word 문서로 변환","url":"/blog/blog/markdown-문서에서-word-문서로-변환#참고","content":"https://hue9010.github.io/etc/pandoc/ "},{"title":"manjaro 에서 update 할때 npm : /usr/lib/node_modules/npm/node_modules/query-string/index.d.ts 증복오류 발생","type":0,"sectionRef":"#","url":"/blog/blog/manjaro-에서-update-할때-npm-usr-lib-node-modules-npm-node-modules-query-string-index-d-ts-증복오류-발생","content":"","keywords":""},{"title":"원인​","type":1,"pageTitle":"manjaro 에서 update 할때 npm : /usr/lib/node_modules/npm/node_modules/query-string/index.d.ts 증복오류 발생","url":"/blog/blog/manjaro-에서-update-할때-npm-usr-lib-node-modules-npm-node-modules-query-string-index-d-ts-증복오류-발생#원인","content":"과게에 npm 을 pacman 으로 설치하고 최근에 npm install -g npm 을 해서 중복된 파일이 발생하여 무결성 검사에 실패함 "},{"title":"조치​","type":1,"pageTitle":"manjaro 에서 update 할때 npm : /usr/lib/node_modules/npm/node_modules/query-string/index.d.ts 증복오류 발생","url":"/blog/blog/manjaro-에서-update-할때-npm-usr-lib-node-modules-npm-node-modules-query-string-index-d-ts-증복오류-발생#조치","content":"$ sudo pacman -S npm --overwrite /usr/lib/node_modules/npm/node_modules/query-string/index.d.ts  명령어로 해결 pacman 설치시 중복된 파일이 있을경우 --overwrite /filepath 을 사용하자 "},{"title":"mecab-ko-dic 품사 태그 설명","type":0,"sectionRef":"#","url":"/blog/blog/mecab-ko-dic-품사-태그-설명","content":"","keywords":""},{"title":"세종 품사 태그​","type":1,"pageTitle":"mecab-ko-dic 품사 태그 설명","url":"/blog/blog/mecab-ko-dic-품사-태그-설명#세종-품사-태그","content":"태그\t설명NNG NNP\t고유 명사 NNB\t의존 명사 NR\t수사 NP\t대명사 VV\t동사 VA\t형용사 VX\t보조 용언 VCP\t긍정 지정사 VCN\t부정 지정사 MM\t관형사 MAG\t일반 부사 MAJ\t접속 부사 IC\t감탄사 JKS\t주격 조사 JKC\t보격 조사 JKG\t관형격 조사 JKO\t목적격 조사 JKB\t부사격 조사 JKV\t호격 조사 JKQ\t인용격 조사 JX\t보조사 JC\t접속 조사 EP\t선어말 어미 EF\t종결 어미 EC\t연결 어미 ETN\t명사형 전성 어미 ETM\t관형형 전성 어미 XPN\t체언 접두사 XSN\t명사 파생 접미사 XSV\t동사 파생 접미사 XSA\t형용사 파생 접미사 XR\t어근 SF\t마침표, 물음표, 느낌표 SE\t줄임표 SS\t따옴표,괄호표,줄표 SP\t쉼표,가운뎃점,콜론,빗금 SO\t붙임표(물결,숨김,빠짐) SW\t기타기호 (논리수학기호,화폐기호) SL\t외국어 SH\t한자 SN\t숫자 "},{"title":"mecab-ko-dic 품사 태그​","type":1,"pageTitle":"mecab-ko-dic 품사 태그 설명","url":"/blog/blog/mecab-ko-dic-품사-태그-설명#mecab-ko-dic-품사-태그","content":"태그\t설명NNG\t일반 명사 NNP\t고유 명사 NNB\t의존 명사 NNBC\t단위를 나타내는 명사 NR\t수사 NP\t대명사 VV\t동사 VA\t형용사 VX\t보조 용언 VCP\t긍정 지정사 VCN\t부정 지정사 MM\t관형사 MAG\t일반 부사 MAJ\t접속 부사 IC\t감탄사 JKS\t주격 조사 JKC\t보격 조사 JKG\t관형격 조사 JKO\t목적격 조사 JKB\t부사격 조사 JKV\t호격 조사 JKQ\t인용격 조사 JX\t보조사 JC\t접속 조사 EP\t선어말 어미 EF\t종결 어미 EC\t연결 어미 ETN\t명사형 전성 어미 ETM\t관형형 전성 어미 XPN\t체언 접두사 XSN\t명사 파생 접미사 XSV\t동사 파생 접미사 XSA\t형용사 파생 접미사 XR\t어근 SF\t마침표, 물음표, 느낌표 SE\t줄임표 … SSO\t여는 괄호 (, [ SSC\t닫는 괄호 ), ] SC\t구분자 , · / : SY SL\t외국어 SH\t한자 SN\t숫자 "},{"title":"minishift install 하기","type":0,"sectionRef":"#","url":"/blog/blog/minishift-install-하기","content":"","keywords":""},{"title":"1. 개요​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#1-개요","content":""},{"title":"2. 설치​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#2-설치","content":"https://docs.okd.io/latest/minishift/getting-started/setting-up-virtualization-environment.html 참고 "},{"title":"2.1. libvirt qemu dnsmasq ebtables 설치​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#21-libvirt-qemu-dnsmasq-ebtables-설치","content":"$ sudo pacman -S libvirt qemu dnsmasq ebtables  "},{"title":"2.2. 로그인된 계정을 kvm,libvir 그룹에 추가​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#22-로그인된-계정을-kvmlibvir-그룹에-추가","content":"$ sudo usermod -a -G kvm,libvirt $(whoami)  "},{"title":"2.3. /etc/libvirt/qemu.conf 내용 추가​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#23-etclibvirtqemuconf-내용-추가","content":"$ sudo sed -ri 's/.?group\\s?=\\s?&quot;.+&quot;/group = &quot;kvm&quot;/1' /etc/libvirt/qemu.conf  "},{"title":"2.4. libvirt 그룸생성​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#24-libvirt-그룸생성","content":"$ newgrp libvirt  "},{"title":"2.5. root 계정에서 KVM driver binary 설치​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#25-root-계정에서-kvm-driver-binary-설치","content":"# curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-centos7 -o /usr/local/bin/docker-machine-driver-kvm # chmod +x /usr/local/bin/docker-machine-driver-kvm  "},{"title":"2.6. libvirt networking 설정​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#26-libvirt-networking-설정","content":"2.6.1 네트워크 확인​  sudo virsh net-list --all 이름 상태 자동 시작 Persistent ---------------------------------------------------- default 활성화 예 예 docker-machines 활성화 예 예 minikube-net 활성화 예 예  2.6.2 default libvirt network 시작​ $ sudo virsh net-start default  2.6.3 libvirt network 자동시작 설정​ $ sudo virsh net-autostart default  "},{"title":"2.3. minishift 설치​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#23-minishift-설치","content":" "},{"title":"3. minishift 시작​","type":1,"pageTitle":"minishift install 하기","url":"/blog/blog/minishift-install-하기#3-minishift-시작","content":"$ minishift start  "},{"title":"mp4 -> gif 로 파일변환","type":0,"sectionRef":"#","url":"/blog/blog/mp4-gif-로-파일변환","content":"","keywords":""},{"title":"개요​","type":1,"pageTitle":"mp4 -> gif 로 파일변환","url":"/blog/blog/mp4-gif-로-파일변환#개요","content":"markdown 으로 문서작성간에 실제 사용하는 장면을 추가하고 싶지만 동영상 파일자체의 용량도 크고 마크다운에서는 이미지만 첨부가능 하여 방법을 찾다가. gif 로 변환하여 첨부하기로 했다. "},{"title":"설치​","type":1,"pageTitle":"mp4 -> gif 로 파일변환","url":"/blog/blog/mp4-gif-로-파일변환#설치","content":"$ sudo pacman -S ffmpeg  "},{"title":"mp4 -> gif​","type":1,"pageTitle":"mp4 -> gif 로 파일변환","url":"/blog/blog/mp4-gif-로-파일변환#mp4---gif","content":"$ ffmpeg -i Screencast\\ 2019-07-07\\ 16:27:53.mp4 Screencast\\ 2019-07-07\\ 16:27:53.gif  이렇게 변환을 했더니 용량이 50메가 넘게 나와서 업로드가 안되었다. 프레임을 낮추어서 변환을 진행했다. $ ffmpeg -i Screencast\\ 2019-07-07\\ 16:27:53.mp4 -r 5 Screencast\\ 2019-07-07\\ 16:27:53.gif  -r 5 옵션은 5프레임으로 설정한다는 뜻이다. 변환후에 용량을 확인해보니 20메가 이하로 줄었다. 확인해보니 샤나인코더도 ffmpeg 기반이라고 한다. https://namu.wiki/w/FFmpeg "},{"title":"NestJS 오류 TypeError 0 , cookie_parser_1.default is not a function","type":0,"sectionRef":"#","url":"/blog/blog/NestJS-오류-TypeError-0-cookieparser1.default-is-not-a-function","content":"아래와 같은 오류를 만났다. [Nest] 21927 - 2021. 11. 09. 오후 3:38:42 LOG [InstanceLoader] TypeOrmCoreModule dependencies initialized +47ms [Nest] 21927 - 2021. 11. 09. 오후 3:38:42 LOG [InstanceLoader] TypeOrmModule dependencies initialized +1ms [Nest] 21927 - 2021. 11. 09. 오후 3:38:42 LOG [InstanceLoader] AuthModule dependencies initialized +0ms [Nest] 21927 - 2021. 11. 09. 오후 3:38:42 LOG [InstanceLoader] UsersModule dependencies initialized +1ms [Nest] 21927 - 2021. 11. 09. 오후 3:38:42 LOG [InstanceLoader] AppModule dependencies initialized +0ms /Users/xii/src/main.ts:28 app.use(cookieParser()); ^ TypeError: (0 , cookie_parser_1.default) is not a function at bootstrap (/Users/im-uchan/Desktop/~~~~~/src/main.ts:28:23) at processTicksAndRejections (node:internal/process/task_queues:96:5) import cookieParser from 'cookie-parser'; //........... app.use(cookieParser()); import때문에 발생한 문제이다. tsconfig.json에 들어가 &quot;esModuleInterop&quot;: true를 추가해주자. { &quot;compilerOptions&quot;: { &quot;module&quot;: &quot;commonjs&quot;, &quot;declaration&quot;: true, &quot;removeComments&quot;: true, &quot;emitDecoratorMetadata&quot;: true, &quot;experimentalDecorators&quot;: true, &quot;allowSyntheticDefaultImports&quot;: true, &quot;esModuleInterop&quot;: true, // 추가 &quot;target&quot;: &quot;es2017&quot;, &quot;sourceMap&quot;: true, &quot;outDir&quot;: &quot;./dist&quot;, &quot;baseUrl&quot;: &quot;./&quot;, &quot;incremental&quot;: true, &quot;skipLibCheck&quot;: true, &quot;strictNullChecks&quot;: false, &quot;noImplicitAny&quot;: false, &quot;strictBindCallApply&quot;: false, &quot;forceConsistentCasingInFileNames&quot;: false, &quot;noFallthroughCasesInSwitch&quot;: false } } ","keywords":""},{"title":"networkpolicy 생성","type":0,"sectionRef":"#","url":"/blog/blog/networkpolicy-생성","content":"apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: internal-policy namespace: default spec: podSelector: matchLabels: name: internal policyTypes: - Egress - Ingress ingress: - {} egress: - to: - podSelector: matchLabels: name: mysql ports: - protocol: TCP port: 3306 - to: - podSelector: matchLabels: name: payroll ports: - protocol: TCP port: 8080 - ports: - port: 53 protocol: UDP - port: 53 protocol: TCP ","keywords":""},{"title":"npm build 간 javascript heap out of memory npm build 발생시","type":0,"sectionRef":"#","url":"/blog/blog/npm-build-간-javascript-heap-out-of-memory-npm-build-발생시","content":"npm run build 후 다음과 같은 에러 메세지 발생 FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 원인 이는 기본 Node.js 가용 메모리가 빌드하기에 충분하지 않아 발생하는 오류 조치 package.json 내부의 build 항목을 다음과 같이 수정 &quot;scripts&quot;: { ... &quot;build&quot;: &quot;node --max_old_space_size=8096 scripts/build.js&quot;, }, ","keywords":""},{"title":"npm WARN @typescript-eslint/eslint-plugin@1.6.0 requires .... 경고발생","type":0,"sectionRef":"#","url":"/blog/blog/npm-WARN-typescript-eslint-eslint-plugin-1-6-0-requires-경고발생","content":"","keywords":""},{"title":"증상​","type":1,"pageTitle":"npm WARN @typescript-eslint/eslint-plugin@1.6.0 requires .... 경고발생","url":"/blog/blog/npm-WARN-typescript-eslint-eslint-plugin-1-6-0-requires-경고발생#증상","content":"npm install 간 경고창 생성 "},{"title":"해결방안​","type":1,"pageTitle":"npm WARN @typescript-eslint/eslint-plugin@1.6.0 requires .... 경고발생","url":"/blog/blog/npm-WARN-typescript-eslint-eslint-plugin-1-6-0-requires-경고발생#해결방안","content":"$ rm -rf package-lock.json $ npm install --save typescript $ npm install   참고 : https://stackoverflow.com/questions/56907286/npm-warn-typescript-eslint-eslint-plugin1-6-0-requires-a-peer-of-typescript "},{"title":"nvm 설치 (node version manager)","type":0,"sectionRef":"#","url":"/blog/blog/nvm-설치-node-version-manager","content":"","keywords":""},{"title":"개요​","type":1,"pageTitle":"nvm 설치 (node version manager)","url":"/blog/blog/nvm-설치-node-version-manager#개요","content":"node.js 을 사용하다 보면 빠르게 버젼업이 되고 있으며 그로 인하여 패키지는 node 버젼이 안맞아서 충돌이 발생하기도 한다. nvm 을 이용하면 손쉽게 node.js 버젼관리가 되며 npm global 설치시 별도의 관리자 권한을 안줘도 된다. "},{"title":"설치​","type":1,"pageTitle":"nvm 설치 (node version manager)","url":"/blog/blog/nvm-설치-node-version-manager#설치","content":"설치는 단순하다. install script 다운 및 설치 $ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash 자동으로 ~/.bash_profile, ~/.zshrc, ~/.profile, ~/.bashrc 에 nvm 명령어가 추가 되겠지만 만약 안될수도 있다. 그럴경우에는 직접 스크립트를 수정한다. ~/.zshrc 수정 export NVM_DIR=~/.nvm [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot;  "},{"title":"실행​","type":1,"pageTitle":"nvm 설치 (node version manager)","url":"/blog/blog/nvm-설치-node-version-manager#실행","content":"node.js 을 설치 하고자 할때 $ nvm install node  혹은 $ nvm install 6.14.4  "},{"title":"제거​","type":1,"pageTitle":"nvm 설치 (node version manager)","url":"/blog/blog/nvm-설치-node-version-manager#제거","content":"npm uninstall node  "},{"title":"org.apache.ibatis.reflection.ReflectionException: 오류","type":0,"sectionRef":"#","url":"/blog/blog/org-apache-ibatis-reflection-ReflectionException-오류","content":"mybatis를 사용해서 쿼리를 실행할 때 주의할 점이 있다. parameterType=&quot;string&quot; 이면서 1개 입력값만 받을 때 if test 문법으로 null 처리를 할 때 오류가 날 수 있다. 오류는 아래와 같다. org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'name' in 'class java.lang.String' 해결방안 if test 부분에 parameter 이름을 value로 하면 된다. &lt;if test=&quot;value != null and value !=''&quot;&gt; AND a.name = #{value} &lt;/if&gt; parameterType=&quot;hashmap&quot; 을 사용하면 컬럼명 그대로 사용 가능하다. &lt;if test=&quot;name != null and name !=''&quot;&gt; AND a.name = #{name } &lt;/if&gt; ","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/page/5","content":"jsch 운영간에 다음과 같은 에러발생 Caused by: com.jcraft.jsch.JSchException: invalid privatekey: [B@24a1c17f at com.jcraft.jsch.KeyPair.load(KeyPair.java:902) at com.jcraft.jsch.KeyPair.load(KeyPair.java:543) at com.jcraft.jsch.IdentityFile.newInstance(IdentityFile.java:40) at com.jcraft.jsch.JSch.addIdentity(JSch.java:393) at com.jcraft.jsch.JSch.addIdentity(JSch.java:353) at com.jcabi.ssh.SSH.session(SSH.java:261) 원인 jsch 에서 연동되는 .ssh/id_rsa 파일형식이 잘못되었다.cat ~/.ssh/id_rsa 파일을 확인하면 다음과 같이 출력 -----BEGIN OPENSSH PRIVATE KEY----- ........ ........ ........ -----END OPENSSH PRIVATE KEY----- 조치사항 ssh-keygen 으로 키을 생성할때 다음과 같은 옵셥추가 $ ssh-keygen -m PEM ","keywords":""},{"title":"docker remote port open (docker 원격 API 활성화)","type":0,"sectionRef":"#","url":"/blog/blog/page/6","content":"","keywords":""},{"title":"1. /lib/systemd/system/docker.service 내용 수정​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/page/6#1-libsystemdsystemdockerservice-내용-수정","content":"[Service] EnvironmentFile=/etc/default/docker ExecStart=/usr/bin/dockerd -H fd:// $DOCKER_OPTS  "},{"title":"2. /etc/default/docker 내용 수정​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/page/6#2-etcdefaultdocker-내용-수정","content":"DOCKER_OPTS=&quot;--dns 8.8.8.8 --dns 8.8.4.4 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&quot;  "},{"title":"3. docker 리로드 및 재시작​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/page/6#3-docker-리로드-및-재시작","content":"systemctl daemon-reload service docker restart  "},{"title":"4. 테스트​","type":1,"pageTitle":"docker remote port open (docker 원격 API 활성화)","url":"/blog/blog/page/6#4-테스트","content":"curl http://localhost:2375/version {&quot;Platform&quot;:{&quot;Name&quot;:&quot;Docker Engine - Community&quot;},&quot;Components&quot;:[{&quot;Name&quot;:&quot;Engine&quot;,&quot;Version&quot;:&quot;18.09.2&quot;,&quot;Details&quot;:{&quot;ApiVersion&quot;:&quot;1.39&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;BuildTime&quot;:&quot;2019-02-10T03:42:13.000000000+00:00&quot;,&quot;Experimental&quot;:&quot;false&quot;,&quot;GitCommit&quot;:&quot;6247962&quot;,&quot;GoVersion&quot;:&quot;go1.10.6&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-45-generic&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;Os&quot;:&quot;linux&quot;}}],&quot;Version&quot;:&quot;18.09.2&quot;,&quot;ApiVersion&quot;:&quot;1.39&quot;,&quot;MinAPIVersion&quot;:&quot;1.12&quot;,&quot;GitCommit&quot;:&quot;6247962&quot;,&quot;GoVersion&quot;:&quot;go1.10.6&quot;,&quot;Os&quot;:&quot;linux&quot;,&quot;Arch&quot;:&quot;amd64&quot;,&quot;KernelVersion&quot;:&quot;4.15.0-45-generic&quot;,&quot;BuildTime&quot;:&quot;2019-02-10T03:42:13.000000000+00:00&quot;}  "},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/page/7","content":"[user@hostname ~]$ ssh root@pong @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the RSA key sent by the remote host is 6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00. Please contact your system administrator. Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message. Offending RSA key in /var/lib/sss/pubconf/known_hosts:4 RSA host key for pong has changed and you have requested strict checking. Host key verification failed. 원인 known_hosts 파일에 저장되어 있는 정보하고 접속하려는 호스트와의 fingerprint 불일치 조치 다음 명령어를 실행 ssh-keygen -R &lt;host&gt; ","keywords":""},{"title":"pip - locale.Error: unsupported locale setting","type":0,"sectionRef":"#","url":"/blog/blog/pip-locale-Error-unsupported-locale-setting","content":"","keywords":""},{"title":"상황​","type":1,"pageTitle":"pip - locale.Error: unsupported locale setting","url":"/blog/blog/pip-locale-Error-unsupported-locale-setting#상황","content":"sudo pip install ansible 입력시 다음과 같은 에러발생 vagrant@vagrant:~$ sudo pip install ansible Traceback (most recent call last): File &quot;/usr/bin/pip&quot;, line 11, in &lt;module&gt; sys.exit(main()) File &quot;/usr/lib/python2.7/dist-packages/pip/__init__.py&quot;, line 215, in main locale.setlocale(locale.LC_ALL, '') File &quot;/usr/lib/python2.7/locale.py&quot;, line 581, in setlocale return _setlocale(category, locale) locale.Error: unsupported locale setting  "},{"title":"해결​","type":1,"pageTitle":"pip - locale.Error: unsupported locale setting","url":"/blog/blog/pip-locale-Error-unsupported-locale-setting#해결","content":"다음 명령어를 입력하여 해결 vagrant@vagrant:~$ export LC_ALL=&quot;en_US.UTF-8&quot; vagrant@vagrant:~$ export LC_CTYPE=&quot;en_US.UTF-8&quot; vagrant@vagrant:~$ sudo dpkg-reconfigure locales  다음 창이 나오면 &quot;en_US.UTF-8 UTF-8&quot; 이 체크되어 있는지 확인후에 탭키로 OK 항목으로 이동후 엔터  "},{"title":"react.js + spring boot","type":0,"sectionRef":"#","url":"/blog/blog/react-js-spring-boot","content":"Spring 프로젝트 생성프로젝트 내부에 별도의 폴더생성npm install -g create-react-appcreate-react-app &lt;APP NAME&gt; --use-npmnpm run eject (webpack 설정 필요시)package.json 내부에 다음항목추가 &quot;proxy&quot;: &quot;http://localhost:8080&quot;, config / paths.js 내부에 추가 templatesPath: resolveApp('../src/main/resources/templates'), appBuild: resolveApp('../src/main/resources/static'), script / build.js 내부에 &quot;measureFileSizesBeforeBuild&quot; 함수 then 구문안 마직막 부분에 추가 fs.rename(paths.appBuild + '/index.html', paths.templatesPath + '/index.html', function (err) { console.log('index.html move') }) 평소에는 webpack dev server 이용하다가 배포시 npm build 후에 배포","keywords":""},{"title":"PlayOnLinux is unable to find 32bits OpenGL libraries","type":0,"sectionRef":"#","url":"/blog/blog/PlayOnLinux-is-unable-to-find-32bits-OpenGL-libraries","content":"","keywords":""},{"title":"증상​","type":1,"pageTitle":"PlayOnLinux is unable to find 32bits OpenGL libraries","url":"/blog/blog/PlayOnLinux-is-unable-to-find-32bits-OpenGL-libraries#증상","content":"PlayOnLinux 실행시 다음과 같은 메세지가 출력이 된다. {% asset_img &quot;error.png&quot; &quot;spaced title&quot; %} "},{"title":"원인​","type":1,"pageTitle":"PlayOnLinux is unable to find 32bits OpenGL libraries","url":"/blog/blog/PlayOnLinux-is-unable-to-find-32bits-OpenGL-libraries#원인","content":"sudo apt autoremove 을 실행하여 32bits OpenGL libraries 가 삭제 (의존성문제) "},{"title":"해결방안​","type":1,"pageTitle":"PlayOnLinux is unable to find 32bits OpenGL libraries","url":"/blog/blog/PlayOnLinux-is-unable-to-find-32bits-OpenGL-libraries#해결방안","content":"저장소 추가 dpkg --add-architecture i386 기존에 설치된 라이브러리 제거 sudo apt-get purge fglrx* xorg.conf 제거 sudo rm /etc/X11/xorg.conf 패키지 재설치 sudo apt-get install --reinstall xserver-xorg-core libgl1-mesa-glx:i386 libgl1-mesa-dri:i386 libgl1-mesa-glx:amd64 libgl1-mesa-dri:amd64 xorg 재설정 sudo dpkg-reconfigure xserver-xorg 재부팅 "},{"title":"react 에서 package.json 내의 버젼정보 가져오기","type":0,"sectionRef":"#","url":"/blog/blog/react-에서-package-json-내의-버젼정보-가져오기","content":"루트 폴더에 .env 파일 생성후에 다음항목 입력 REACT_APP_VERSION=$npm_package_version REACT_APP_NAME=$npm_package_name react app 재시작 후에 임의의 파일에 넣고 테스트 console.log(`${process.env.REACT_APP_NAME} ${process.env.REACT_APP_VERSION}`) ","keywords":""},{"title":"react proxy server 설정","type":0,"sectionRef":"#","url":"/blog/blog/react-proxy-server-설정","content":"","keywords":""},{"title":"개요​","type":1,"pageTitle":"react proxy server 설정","url":"/blog/blog/react-proxy-server-설정#개요","content":"npm devserver 에서 proxy 설정을 할경우 package.json 파일에 &quot;proxy&quot;: &quot;http://localhost:&lt;PORT-GOES-HERE&gt;” 항목을 추가해서 설정을 했었다.   문제는 기본적인 주소만 설정이 되어 있어서 웹소켓 같은 세부설정이 안되는 문제가 있었다.  CRA (Create-react-app) v2 부터는 src/setupProxy.js 파일을 통하여 proxy server 을 커스터마이징 을 할수있게 되었다.   참고 @velopert Create-react-app V2 릴리즈! 무슨 변경 사항이 있을까? "},{"title":"설치​","type":1,"pageTitle":"react proxy server 설정","url":"/blog/blog/react-proxy-server-설정#설치","content":"기존 프로젝트에 http-proxy-middleware 추가하기 $ npm install --save-dev http-proxy-middleware package.json 에 &quot;proxy&quot;: &quot;http://localhost:&lt;PORT-GOES-HERE&gt;” 항목 제거 src/setupProxy.js 파일 생성 및 수정 const proxy = require('http-proxy-middleware'); // create-react-app proxy 설정  // 190524 je.kim dev server 에서 proxy 사용시 세션 유지 불가 -&gt; 강제로 세션키를 맞춤 var cookie; // proxy 로 request 시 이벤트 function relayRequestHeaders(proxyReq, req) { console.debug('💥💥💥 request 💥💥💥'); Object.keys(req.headers).forEach(function (key) { console.debug(${key} : ${req.headers[key]}); }); if (cookie) { proxyReq.setHeader('cookie', cookie); } }; // proxy 로 Response 시 이벤트 function relayResponseHeaders(proxyRes, req, res) { console.debug('💥💥💥 response 💥💥💥'); Object.keys(proxyRes.headers).forEach(function (key) { console.debug(${key} : ${proxyRes.headers[key]}); }); var proxyCookie = proxyRes.headers[&quot;set-cookie&quot;]; if (proxyCookie) { cookie = proxyCookie; } }; module.exports = function(app) { // ... // 프록시 설정 app.use( proxy([ '/', ], { // 대상서버 target: 'http://localhost:8080' , secure: false, // disable SSL verification //changeOrigin: true, // for vhosted sites, changes host header to match to target's host ws : true, // websock on onProxyReq: relayRequestHeaders, onProxyRes: relayResponseHeaders, // ajax 혹은 통신이 있을경우에 로그에 표시 // logLevel: 'debug' } ) ); };   "},{"title":"revealjs 에서 pdf 출력","type":0,"sectionRef":"#","url":"/blog/blog/revealjs-에서-pdf-출력","content":"revealjs 페이지 에서 다음 주소를 추가 https://100milliongold.github.io/presentation/reveal.js.html?print-pdf https://100milliongold.github.io/presentation/reveal.js.html?print-pdf","keywords":""},{"title":"setState() 제어","type":0,"sectionRef":"#","url":"/blog/blog/setState-제어","content":"react.js 을 이용하다 보면 상태변경을 위하여 setState() 을 자주 사용하게 된다. 하지만 setState() 메서드는 비동기 형식이기 때문에 순서를 제어하기 힘들다. 만약 setState() 을 사용후에 별도의 메서드를 실행할려도 할때 다음처럼 이용하면 된다. 예시 this.setState({ setLoading: true, }, ()=&gt;{ setTimeout(this.setState({ setLoading: false, }), 1000); }) ","keywords":""},{"title":"react 외부 javascript 라이브러리 불려오기 (kakao map javascript)","type":0,"sectionRef":"#","url":"/blog/blog/react-외부-javascript-라이브러리-불려오기-kakao-map-javascript","content":"","keywords":""},{"title":"개요​","type":1,"pageTitle":"react 외부 javascript 라이브러리 불려오기 (kakao map javascript)","url":"/blog/blog/react-외부-javascript-라이브러리-불려오기-kakao-map-javascript#개요","content":"react 을 이용하다 보면 대부분의 라이브러리들은 npm 을 이용하여 손쉽게 이용이 가능하다. 하지만 cdn 혹은 kakao map 과 같은 api 을 통한 javascript 라이브러리 은 인증문제도 있어서 가져오기 애매할수도 있다.  그렇다고 해서 방법이 없는것은 아니다. scriptjs 을 통하여 외부 라이브러리를 통하여 가져올수는 있다. "},{"title":"설치​","type":1,"pageTitle":"react 외부 javascript 라이브러리 불려오기 (kakao map javascript)","url":"/blog/blog/react-외부-javascript-라이브러리-불려오기-kakao-map-javascript#설치","content":"$ npm i scriptjs  "},{"title":"예시​","type":1,"pageTitle":"react 외부 javascript 라이브러리 불려오기 (kakao map javascript)","url":"/blog/blog/react-외부-javascript-라이브러리-불려오기-kakao-map-javascript#예시","content":"import $script from 'scriptjs'; ... const kakao_url = `http://dapi.kakao.com/v2/maps/sdk.js?autoload=false&amp;appkey=${API_KEY}`; $script(kakao_url, () =&gt; { /*global kakao*/ this.kakao = kakao; kakao.maps.load(function () { // v3가 모두 로드된 후, 이 콜백 함수가 실행됩니다. ... }); });  scriptjs 사용시 / global {변수명} / 을 추가하여 컴파일시 에러가 나지 않도록 조치 한다. "},{"title":"react.js 와 연동 (전체 스크립트)​","type":1,"pageTitle":"react 외부 javascript 라이브러리 불려오기 (kakao map javascript)","url":"/blog/blog/react-외부-javascript-라이브러리-불려오기-kakao-map-javascript#reactjs-와-연동-전체-스크립트","content":"import React, { Component , createRef} from 'react' import $script from 'scriptjs'; import * as mapApi from '../../services/maps' export default class KakaoMap extends Component { constructor(props){ super(props); this.appRef = createRef(); } state = { API_KEY: null, setLoading: true, } componentDidMount() { this.getApiKey().then(API_KEY =&gt; { this.setState({ API_KEY, setLoading: false, }); this.setKakaoMap(); }); } componentDidUpdate(){ if (this.customOverlay){ this.customOverlay.setMap(null); this.customOverlay = null; } this.setCenter(); this.setOverLay(); } /** * 서버에 api 키 가져오기 */ getApiKey = async () =&gt; { const res = await mapApi.getApiKey(); return res.data; } /** * 지도 가운데 */ setCenter = ()=&gt;{ var LatLng = this.props.LatLng; let { x, y } = LatLng; if(typeof this.kakao === 'undefined' || this.kakao == null) return false; // 이동할 위도 경도 위치를 생성합니다 var moveLatLon = new this.kakao.maps.LatLng(y, x); // 지도 중심을 이동 시킵니다 this.map.setCenter(moveLatLon); } /** * 오버레이 생성 */ setOverLay = () =&gt; { var LatLng = this.props.LatLng; let { x, y , data} = LatLng; // console.log(data); if (typeof this.kakao === 'undefined' || this.kakao == null || !data) return false; // 커스텀 오버레이에 표시할 내용입니다 // HTML 문자열 또는 Dom Element 입니다 var content = ` &lt;div id=&quot;overlay-area&quot; class=&quot;arrow_box&quot;&gt; &lt;ul&gt; &lt;li&gt;${data.address_name}&lt;/li&gt; &lt;li&gt;${data.category_name}&lt;/li&gt; &lt;li&gt;${data.phone}&lt;/li&gt; &lt;li&gt;${data.place_name}&lt;/li&gt; &lt;li&gt;${data.place_url}&lt;/li&gt; &lt;ul&gt; &lt;/div&gt; `; // 커스텀 오버레이가 표시될 위치입니다 var position = new kakao.maps.LatLng(y, x); // 커스텀 오버레이를 생성합니다 this.customOverlay = new kakao.maps.CustomOverlay({ position: position, content: content }); // 커스텀 오버레이를 지도에 표시합니다 this.customOverlay.setMap(this.map); } /** * 카카오 맵 생성 */ setKakaoMap = ()=&gt;{ var {x , y} = this.props.LatLng; const {API_KEY} = this.state; const kakao_url = `http://dapi.kakao.com/v2/maps/sdk.js?autoload=false&amp;appkey=${API_KEY}`; var that = this; $script(kakao_url, () =&gt; { //console.log(); // golobal setting /*global kakao*/ this.kakao = kakao; kakao.maps.load(function () { // v3가 모두 로드된 후, 이 콜백 함수가 실행됩니다. that.kakao = kakao; that.map = new that.kakao.maps.Map(that.appRef.current, { center: new that.kakao.maps.LatLng(y, x), // 지도의 중심좌표 level: 3 // 지도의 확대 레벨 }); }); }); } render() { const { setLoading } = this.state return ( (setLoading)? &lt;div&gt;Looooooooooooading....&lt;/div&gt; : &lt;div style={{ 'height': '850px' }} ref={this.appRef} /&gt; ) } }  "},{"title":"Spring Boot - jar로 서비스 등록하기","type":0,"sectionRef":"#","url":"/blog/blog/Spring-Boot-jar로-서비스-등록하기","content":"참고: Spring Boot - jar로 Deploy(배포)하기 [허원철의 개발 블로그] 서비스 등록 서비스 등록 sudo vi /etc/init.d/myApp #!/bin/sh SERVICE_NAME=myApp PATH_TO_JAR=/usr/local/myApp.jar PID_PATH_NAME=/tmp/myApp-pid case $1 in start) echo &quot;Starting $SERVICE_NAME ...&quot; if [ ! -f $PID_PATH_NAME ]; then nohup java -jar $PATH_TO_JAR /tmp 2&gt;&gt; /dev/null &gt;&gt; /dev/null &amp; echo $! &gt; $PID_PATH_NAME echo &quot;$SERVICE_NAME started ...&quot; else echo &quot;$SERVICE_NAME is already running ...&quot; fi ;; stop) if [ -f $PID_PATH_NAME ]; then PID=$(cat $PID_PATH_NAME); echo &quot;$SERVICE_NAME stoping ...&quot; kill $PID; echo &quot;$SERVICE_NAME stopped ...&quot; rm $PID_PATH_NAME else echo &quot;$SERVICE_NAME is not running ...&quot; fi ;; restart) if [ -f $PID_PATH_NAME ]; then PID=$(cat $PID_PATH_NAME); echo &quot;$SERVICE_NAME stopping ...&quot;; kill $PID; echo &quot;$SERVICE_NAME stopped ...&quot;; rm $PID_PATH_NAME echo &quot;$SERVICE_NAME starting ...&quot; nohup java $JAVA_OPTS -jar $PATH_TO_JAR /tmp 2&gt;&gt; /dev/null &gt;&gt; /dev/null &amp; echo $! &gt; $PID_PATH_NAME echo &quot;$SERVICE_NAME started ...&quot; else echo &quot;$SERVICE_NAME is not running ...&quot; fi ;; esac 서비스 실행 service myapp start | stop | restart * spring boot 1.3부터는 별도의 스크립트 없이도 간단한 설정으로 자체적으로 실행이 가능함 Maven &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;executable&gt;true&lt;/executable&gt; &lt;/configuration&gt; &lt;/plugin&gt; Gradle bootJar { launchScript() } 서비스 등록 sudo ln -s /var/myapp/myapp.jar /etc/init.d/myapp 서비스 실행 service myapp start 참고 : Installing Spring Boot Applications","keywords":""},{"title":"Spring Security 에서 로그인 팝업창 안나오게 설정","type":0,"sectionRef":"#","url":"/blog/blog/Spring-Security-에서-로그인-팝업창-안나오게-설정","content":"Spring Security 을 사용하면 가끔식 로그인 팝업창이 나오는데 출력을 헤제할수가 있다. 중요한건 NoPopupBasicAuthenticationEntryPoint.java 에서 제어하는 것이다. WebSecurityConfig.java package com.jeaeok.myproject.testApp.configs; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import org.springframework.security.crypto.password.PasswordEncoder; @Configuration /** 스프링 시큐리티 설정 @author atcis */ public class WebSecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private AuthProvider authProvider; @Bean public PasswordEncoder getEncoder() { return new BCryptPasswordEncoder(); } @Override /** * 스크링 시큐리트를 통하여 접근페이지 설정 */ protected void configure(HttpSecurity http) throws Exception{ http .logout() .logoutUrl(&quot;/api/logout&quot;) .and() .csrf() .disable() .authorizeRequests() .antMatchers( &quot;/&quot;, &quot;/api/v1/user/join&quot;, &quot;/static/**&quot; ).permitAll() .anyRequest().authenticated() .and() .headers().frameOptions().sameOrigin() .and() .httpBasic() .authenticationEntryPoint(new NoPopupBasicAuthenticationEntryPoint()) ; http.authenticationProvider(authProvider); } } NoPopupBasicAuthenticationEntryPoint.java package com.jeaeok.myproject.testApp.configs; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.AuthenticationException; import org.springframework.security.web.AuthenticationEntryPoint; public class NoPopupBasicAuthenticationEntryPoint implements AuthenticationEntryPoint { @Override public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException { response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage()); } } ","keywords":""},{"title":"ssh port forwording","type":0,"sectionRef":"#","url":"/blog/blog/ssh-port-forwording","content":"local ssh -L 80:intra.example.com:80 gw.example.com remote ssh -R 8080:localhost:80 public.example.com 이를 이용하여 ssh 을 통하여 port 포워딩이 가능해진다.","keywords":""},{"title":"spring boot 을 influxDB 와 연동하기","type":0,"sectionRef":"#","url":"/blog/blog/spring-boot-을-influxDB-와-연동하기","content":"spring boot : 1.5.10.RELEASE 이상jdk : 1.8 이상influxDB : 2.7 influxDB 설치 docker 에서 설치 docker pull influxdb docker run --name influxdb-test -p8086:8086 -d influxdb 샘플 데이터 생성하기 influxDB 접속 docker exec -it influxdb-test /bin/bash influx -precision rfc3339 Connected to http://localhost:8086 version 1.4.x InfluxDB shell 1.4.x 데이터베이스 생성 CREATE DATABASE NOAA_water_database exit 샘플 데이터 다운받기 curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt 데이터를 influxDB 에 import 하기 influx -import -path=NOAA_data.txt -precision=s -database=NOAA_water_database 테스트 하기 influx -precision rfc3339 use NOAA_water_database SELECT * FROM h2o_feet LIMIT 5 spring boot 에 연동하기 spring boot 프로젝트 생성pom.xml 설정 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;influxDB-Test&lt;/artifactId&gt; &lt;version&gt;0.1.0&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.5.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.influxdb&lt;/groupId&gt; &lt;artifactId&gt;influxdb-java&lt;/artifactId&gt; &lt;version&gt;2.14&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miwurster&lt;/groupId&gt; &lt;artifactId&gt;spring-data-influxdb&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; spring configure 설정 (InfluxDBConfiguration.java) @Configuration @EnableConfigurationProperties(InfluxDBProperties.class) public class InfluxDBConfiguration { @Bean public InfluxDBConnectionFactory connectionFactory(final InfluxDBProperties properties) { return new InfluxDBConnectionFactory(properties); } @Bean public InfluxDBTemplate&lt;Point&gt; influxDBTemplate(final InfluxDBConnectionFactory connectionFactory) { /* * You can use your own 'PointCollectionConverter' implementation, e.g. in case * you want to use your own custom measurement object. */ return new InfluxDBTemplate&lt;&gt;(connectionFactory, new PointConverter()); } @Bean public DefaultInfluxDBTemplate defaultTemplate(final InfluxDBConnectionFactory connectionFactory) { /* * If you are just dealing with Point objects from 'influxdb-java' you could * also use an instance of class DefaultInfluxDBTemplate. */ return new DefaultInfluxDBTemplate(connectionFactory); } } application.properties 설정 spring.influxdb.url=http://localhost:8086 spring.influxdb.database=NOAA_water_database spring.influxdb.username=~ spring.influxdb.retentionPolicy=autogen DTO 생성(H2oFeet.java) @Measurement(name = &quot;h2o_feet&quot;) public class H2oFeet { @Column(name = &quot;water_level&quot;) private Double water_level; @Column(name = &quot;level description&quot;) private String level_description; @Column(name = &quot;location&quot;) private String location; @Column(name = &quot;time&quot;) private Instant time; public Double getWater_level() { return water_level; } public void setWater_level(Double water_level) { this.water_level = water_level; } public String getLevel_description() { return level_description; } public void setLevel_description(String level_description) { this.level_description = level_description; } public String getLocation() { return location; } public void setLocation(String location) { this.location = location; } public Instant getTime() { return time; } public void setTime(Instant time) { this.time = time; } } controller 생성 (MainController.java) @Controller @RequestMapping(path=&quot;/api/v1/NOAAWater&quot;) public class MainController { @Autowired private MainService mainService; @GetMapping(path=&quot;/h2os&quot;) public @ResponseBody List&lt;H2oFeet&gt; h2o_list() { return mainService.h2o_list(); } } service 생성 (MainService.java) @Service public class MainService { @Autowired private InfluxDBTemplate&lt;Point&gt; influxDBTemplate; public List&lt;H2oFeet&gt; h2o_list() { Query query = QueryBuilder.newQuery(&quot;SELECT * FROM h2o_feet LIMIT 1000&quot;) .forDatabase(&quot;NOAA_water_database&quot;) .create(); QueryResult queryResult = influxDBTemplate.query(query); InfluxDBResultMapper resultMapper = new InfluxDBResultMapper(); // thread-safe - can be reused return resultMapper.toPOJO(queryResult, H2oFeet.class); } } Test curl $curl -X GET http://localhost:8080/api/v1/NOAAWater/h2os github : https://github.com/gadian88/influxDB-Test","keywords":""},{"title":"Disable SELinux","type":0,"sectionRef":"#","url":"/blog/blog/tags/cent-os","content":"SELinux(Security Enhanced Linux)는 관리자와 사용자가 액세스 제어에 대한 제어력을 높일 수 있는 Linux 커널 보안 모듈이다. SELinux 정책 규칙에 따라 접속할 수 있다. SELinux 정책 규칙은 프로세스와 사용자가 파일과 상호 작용하는 방법뿐만 아니라 프로세스와 사용자가 서로 상호작용하는 방법을 지정한다. 파일을 여는 프로세스처럼 액세스를 특별히 허용하는 SELinux 정책 규칙이 없는 경우, 액세스가 거부된다. Disable SELinux SELinux mode 변경 sudo setenforce 0 /etc/selinux/config 변경 SELINUX 항목을 disabled로 변경 # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=disabled # SELINUXTYPE= can take one of these two values: # targeted - Targeted processes are protected, # mls - Multi Level Security protection. SELINUXTYPE=targeted Server reboot","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/centos","content":"Centos SELINUX 설정을 비활성화 후에 재부팅시 부팅화면에서 멈추는 현상 원인 /etc/selinux/config 파일에 SELINUXTYPE=disabled 설정되어 있음 해결방안 grub 화면에서 부팅 운영체제를 선택후 e 키를 눌러서 kernel 부팅 옵션으로 들어가서 linux16 / vmlinu 가 있는 부분에 selinux = 0 추가할것 linux16 / vmlinu - 생략 - selinux = 0 완료후에 Ctrl + x 키로 리부트","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/eclipse","content":"이클립스를 elementary OS 에서 실행하고자 하면 이클립스 실행중으로 나오고 작동이 안된다. 원인 elementary OS 에서 쓰이는 GTK3 와 이클립스에 사용중인 GTK2이 충돌나서 그런것 같다 해결 eclipse.ini 파일에 다음을 추가한다 --launcher.GTK_version ","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/elementary-os","content":"이클립스를 elementary OS 에서 실행하고자 하면 이클립스 실행중으로 나오고 작동이 안된다. 원인 elementary OS 에서 쓰이는 GTK3 와 이클립스에 사용중인 GTK2이 충돌나서 그런것 같다 해결 eclipse.ini 파일에 다음을 추가한다 --launcher.GTK_version ","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/front-end/page/2","content":"npm run build 후 다음과 같은 에러 메세지 발생 FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 원인 이는 기본 Node.js 가용 메모리가 빌드하기에 충분하지 않아 발생하는 오류 조치 package.json 내부의 build 항목을 다음과 같이 수정 &quot;scripts&quot;: { ... &quot;build&quot;: &quot;node --max_old_space_size=8096 scripts/build.js&quot;, }, ","keywords":""},{"title":"yarn cache 저장위치 확인하기","type":0,"sectionRef":"#","url":"/blog/blog/tags/hadoop-yarn","content":"가끔 맵리듀스 작업을 하다보면, yarn 에 캐쉬가 많이 남아 있어서 충돌이 발생하는 경우가 발생한다. 초기화을 하자 yarn cache 저장위치 확인하기 yarn-site.xml 파일에 yarn.nodemanager.local-dirs 위치 확인하기 &lt;property&gt; &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt; &lt;value&gt;/hadoop/yarn/local&lt;/value&gt; &lt;/property&gt; 해당 폴더의 내용 지우기 [yarn@node2 ~]$ cd /hadoop/yarn/local/ [yarn@node2 local]$ ls filecache nmPrivate spark_shuffle usercache [yarn@node2 local]$ rm -rf filecache/ usercache/ yarn 재시작","keywords":""},{"title":"influxDB 설치","type":0,"sectionRef":"#","url":"/blog/blog/tags/influx-db","content":"spring boot : 1.5.10.RELEASE 이상jdk : 1.8 이상influxDB : 2.7 influxDB 설치 docker 에서 설치 docker pull influxdb docker run --name influxdb-test -p8086:8086 -d influxdb 샘플 데이터 생성하기 influxDB 접속 docker exec -it influxdb-test /bin/bash influx -precision rfc3339 Connected to http://localhost:8086 version 1.4.x InfluxDB shell 1.4.x 데이터베이스 생성 CREATE DATABASE NOAA_water_database exit 샘플 데이터 다운받기 curl https://s3.amazonaws.com/noaa.water-database/NOAA_data.txt -o NOAA_data.txt 데이터를 influxDB 에 import 하기 influx -import -path=NOAA_data.txt -precision=s -database=NOAA_water_database 테스트 하기 influx -precision rfc3339 use NOAA_water_database SELECT * FROM h2o_feet LIMIT 5 spring boot 에 연동하기 spring boot 프로젝트 생성pom.xml 설정 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;influxDB-Test&lt;/artifactId&gt; &lt;version&gt;0.1.0&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.5.RELEASE&lt;/version&gt; &lt;/parent&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.influxdb&lt;/groupId&gt; &lt;artifactId&gt;influxdb-java&lt;/artifactId&gt; &lt;version&gt;2.14&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.miwurster&lt;/groupId&gt; &lt;artifactId&gt;spring-data-influxdb&lt;/artifactId&gt; &lt;version&gt;1.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;properties&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; spring configure 설정 (InfluxDBConfiguration.java) @Configuration @EnableConfigurationProperties(InfluxDBProperties.class) public class InfluxDBConfiguration { @Bean public InfluxDBConnectionFactory connectionFactory(final InfluxDBProperties properties) { return new InfluxDBConnectionFactory(properties); } @Bean public InfluxDBTemplate&lt;Point&gt; influxDBTemplate(final InfluxDBConnectionFactory connectionFactory) { /* * You can use your own 'PointCollectionConverter' implementation, e.g. in case * you want to use your own custom measurement object. */ return new InfluxDBTemplate&lt;&gt;(connectionFactory, new PointConverter()); } @Bean public DefaultInfluxDBTemplate defaultTemplate(final InfluxDBConnectionFactory connectionFactory) { /* * If you are just dealing with Point objects from 'influxdb-java' you could * also use an instance of class DefaultInfluxDBTemplate. */ return new DefaultInfluxDBTemplate(connectionFactory); } } application.properties 설정 spring.influxdb.url=http://localhost:8086 spring.influxdb.database=NOAA_water_database spring.influxdb.username=~ spring.influxdb.retentionPolicy=autogen DTO 생성(H2oFeet.java) @Measurement(name = &quot;h2o_feet&quot;) public class H2oFeet { @Column(name = &quot;water_level&quot;) private Double water_level; @Column(name = &quot;level description&quot;) private String level_description; @Column(name = &quot;location&quot;) private String location; @Column(name = &quot;time&quot;) private Instant time; public Double getWater_level() { return water_level; } public void setWater_level(Double water_level) { this.water_level = water_level; } public String getLevel_description() { return level_description; } public void setLevel_description(String level_description) { this.level_description = level_description; } public String getLocation() { return location; } public void setLocation(String location) { this.location = location; } public Instant getTime() { return time; } public void setTime(Instant time) { this.time = time; } } controller 생성 (MainController.java) @Controller @RequestMapping(path=&quot;/api/v1/NOAAWater&quot;) public class MainController { @Autowired private MainService mainService; @GetMapping(path=&quot;/h2os&quot;) public @ResponseBody List&lt;H2oFeet&gt; h2o_list() { return mainService.h2o_list(); } } service 생성 (MainService.java) @Service public class MainService { @Autowired private InfluxDBTemplate&lt;Point&gt; influxDBTemplate; public List&lt;H2oFeet&gt; h2o_list() { Query query = QueryBuilder.newQuery(&quot;SELECT * FROM h2o_feet LIMIT 1000&quot;) .forDatabase(&quot;NOAA_water_database&quot;) .create(); QueryResult queryResult = influxDBTemplate.query(query); InfluxDBResultMapper resultMapper = new InfluxDBResultMapper(); // thread-safe - can be reused return resultMapper.toPOJO(queryResult, H2oFeet.class); } } Test curl $curl -X GET http://localhost:8080/api/v1/NOAAWater/h2os github : https://github.com/gadian88/influxDB-Test","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/java-script","content":"npm run build 후 다음과 같은 에러 메세지 발생 FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 원인 이는 기본 Node.js 가용 메모리가 빌드하기에 충분하지 않아 발생하는 오류 조치 package.json 내부의 build 항목을 다음과 같이 수정 &quot;scripts&quot;: { ... &quot;build&quot;: &quot;node --max_old_space_size=8096 scripts/build.js&quot;, }, ","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/linix","content":"Centos SELINUX 설정을 비활성화 후에 재부팅시 부팅화면에서 멈추는 현상 원인 /etc/selinux/config 파일에 SELINUXTYPE=disabled 설정되어 있음 해결방안 grub 화면에서 부팅 운영체제를 선택후 e 키를 눌러서 kernel 부팅 옵션으로 들어가서 linux16 / vmlinu 가 있는 부분에 selinux = 0 추가할것 linux16 / vmlinu - 생략 - selinux = 0 완료후에 Ctrl + x 키로 리부트","keywords":""},{"title":"2. 새로운 호스트에 METRICS_COLLECTOR 설치","type":0,"sectionRef":"#","url":"/blog/blog/tags/linux/page/2","content":"curl -u admin:admin -H &quot;X-Requested-By:ambari&quot; - i -X DELETE http://192.168.1.191:8080/api/v1/clusters/supercom_test/hosts/node04/host_components/METRICS_COLLECTOR 2. 새로운 호스트에 METRICS_COLLECTOR 설치 curl -u admin:admin -H &quot;X-Requested-By:ambari&quot; -i -X POST http://192.168.1.191:8080/api/v1/clusters/supercom_test/hosts/node02/host_components/METRICS_COLLECTOR ","keywords":""},{"title":"해결방안","type":0,"sectionRef":"#","url":"/blog/blog/tags/mybatis","content":"mybatis를 사용해서 쿼리를 실행할 때 주의할 점이 있다. parameterType=&quot;string&quot; 이면서 1개 입력값만 받을 때 if test 문법으로 null 처리를 할 때 오류가 날 수 있다. 오류는 아래와 같다. org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'name' in 'class java.lang.String' 해결방안 if test 부분에 parameter 이름을 value로 하면 된다. &lt;if test=&quot;value != null and value !=''&quot;&gt; AND a.name = #{value} &lt;/if&gt; parameterType=&quot;hashmap&quot; 을 사용하면 컬럼명 그대로 사용 가능하다. &lt;if test=&quot;name != null and name !=''&quot;&gt; AND a.name = #{name } &lt;/if&gt; ","keywords":""},{"title":"Disable SELinux","type":0,"sectionRef":"#","url":"/blog/blog/tags/se-linux","content":"SELinux(Security Enhanced Linux)는 관리자와 사용자가 액세스 제어에 대한 제어력을 높일 수 있는 Linux 커널 보안 모듈이다. SELinux 정책 규칙에 따라 접속할 수 있다. SELinux 정책 규칙은 프로세스와 사용자가 파일과 상호 작용하는 방법뿐만 아니라 프로세스와 사용자가 서로 상호작용하는 방법을 지정한다. 파일을 여는 프로세스처럼 액세스를 특별히 허용하는 SELinux 정책 규칙이 없는 경우, 액세스가 거부된다. Disable SELinux SELinux mode 변경 sudo setenforce 0 /etc/selinux/config 변경 SELINUX 항목을 disabled로 변경 # This file controls the state of SELinux on the system. # SELINUX= can take one of these three values: # enforcing - SELinux security policy is enforced. # permissive - SELinux prints warnings instead of enforcing. # disabled - No SELinux policy is loaded. SELINUX=disabled # SELINUXTYPE= can take one of these two values: # targeted - Targeted processes are protected, # mls - Multi Level Security protection. SELINUXTYPE=targeted Server reboot","keywords":""},{"title":"yarn cache 저장위치 확인하기","type":0,"sectionRef":"#","url":"/blog/blog/tags/server/page/3","content":"가끔 맵리듀스 작업을 하다보면, yarn 에 캐쉬가 많이 남아 있어서 충돌이 발생하는 경우가 발생한다. 초기화을 하자 yarn cache 저장위치 확인하기 yarn-site.xml 파일에 yarn.nodemanager.local-dirs 위치 확인하기 &lt;property&gt; &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt; &lt;value&gt;/hadoop/yarn/local&lt;/value&gt; &lt;/property&gt; 해당 폴더의 내용 지우기 [yarn@node2 ~]$ cd /hadoop/yarn/local/ [yarn@node2 local]$ ls filecache nmPrivate spark_shuffle usercache [yarn@node2 local]$ rm -rf filecache/ usercache/ yarn 재시작","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/ssh","content":"[user@hostname ~]$ ssh root@pong @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the RSA key sent by the remote host is 6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00. Please contact your system administrator. Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message. Offending RSA key in /var/lib/sss/pubconf/known_hosts:4 RSA host key for pong has changed and you have requested strict checking. Host key verification failed. 원인 known_hosts 파일에 저장되어 있는 정보하고 접속하려는 호스트와의 fingerprint 불일치 조치 다음 명령어를 실행 ssh-keygen -R &lt;host&gt; ","keywords":""},{"title":"원인","type":0,"sectionRef":"#","url":"/blog/blog/tags/troubleshooting","content":"Centos SELINUX 설정을 비활성화 후에 재부팅시 부팅화면에서 멈추는 현상 원인 /etc/selinux/config 파일에 SELINUXTYPE=disabled 설정되어 있음 해결방안 grub 화면에서 부팅 운영체제를 선택후 e 키를 눌러서 kernel 부팅 옵션으로 들어가서 linux16 / vmlinu 가 있는 부분에 selinux = 0 추가할것 linux16 / vmlinu - 생략 - selinux = 0 완료후에 Ctrl + x 키로 리부트","keywords":""},{"title":"ubuntu 에서 Netflix 시청하기","type":0,"sectionRef":"#","url":"/blog/blog/ubuntu-에서-Netflix-시청하기","content":"","keywords":""},{"title":"1. Firefox 에서 DRM 설정하기​","type":1,"pageTitle":"ubuntu 에서 Netflix 시청하기","url":"/blog/blog/ubuntu-에서-Netflix-시청하기#1-firefox-에서-drm-설정하기","content":"Firefox 에서 DRM 제어 콘텐츠 재생 체크하기  "},{"title":"2. extra codecs 설치하기​","type":1,"pageTitle":"ubuntu 에서 Netflix 시청하기","url":"/blog/blog/ubuntu-에서-Netflix-시청하기#2-extra-codecs-설치하기","content":"$ sudo apt install libavcodec-extra  "},{"title":"ubuntu jupyter-notekook 설치","type":0,"sectionRef":"#","url":"/blog/blog/ubuntu-jupyter-notekook-설치","content":"","keywords":""},{"title":"1. python3 install​","type":1,"pageTitle":"ubuntu jupyter-notekook 설치","url":"/blog/blog/ubuntu-jupyter-notekook-설치#1-python3-install","content":"$sudo apt install python3  "},{"title":"2. pip3 install​","type":1,"pageTitle":"ubuntu jupyter-notekook 설치","url":"/blog/blog/ubuntu-jupyter-notekook-설치#2-pip3-install","content":"$sudo apt install python3-pip  "},{"title":"3. ipython3 install​","type":1,"pageTitle":"ubuntu jupyter-notekook 설치","url":"/blog/blog/ubuntu-jupyter-notekook-설치#3-ipython3-install","content":"sudo apt install ipython3  "},{"title":"4. jupyter-notebook install​","type":1,"pageTitle":"ubuntu jupyter-notekook 설치","url":"/blog/blog/ubuntu-jupyter-notekook-설치#4-jupyter-notebook-install","content":"sudo apt install jupyter-notebook  "},{"title":"5. start jupyter-notebook​","type":1,"pageTitle":"ubuntu jupyter-notekook 설치","url":"/blog/blog/ubuntu-jupyter-notekook-설치#5-start-jupyter-notebook","content":"jupyter-notebook  "},{"title":"pip cannot import name main 에러날때","type":0,"sectionRef":"#","url":"/blog/blog/ubuntu-에서-pip3-가-pip-cannot-import-name-main-에러날때","content":"","keywords":""},{"title":"원인​","type":1,"pageTitle":"pip cannot import name main 에러날때","url":"/blog/blog/ubuntu-에서-pip3-가-pip-cannot-import-name-main-에러날때#원인","content":"ubuntu 에서 apt install python-pip 인스톨후에 sudo pip install pip --upgrade 함 "},{"title":"증상​","type":1,"pageTitle":"pip cannot import name main 에러날때","url":"/blog/blog/ubuntu-에서-pip3-가-pip-cannot-import-name-main-에러날때#증상","content":"pip 실행간 다음과 같은 에러발생 guru@guru-notebook:~$ pip3 install numpy Traceback (most recent call last): File &quot;/usr/bin/pip3&quot;, line 9, in &lt;module&gt; from pip import main ImportError: cannot import name 'main'  "},{"title":"해결​","type":1,"pageTitle":"pip cannot import name main 에러날때","url":"/blog/blog/ubuntu-에서-pip3-가-pip-cannot-import-name-main-에러날때#해결","content":"다음 명령어를 실행 (참고 : Error after upgrading pip: cannot import name 'main') sudo python3 -m pip uninstall pip &amp;&amp; sudo apt install python3-pip --reinstall  "},{"title":"vagrant box 저장위치 설정","type":0,"sectionRef":"#","url":"/blog/blog/vagrant-box-저장위치-설정","content":".bashrc 파일에 다음과 같이 설정 export VAGRANT_HOME=/media/master/vagrant ","keywords":""},{"title":"Vagrant Disk Change","type":0,"sectionRef":"#","url":"/blog/blog/Vagrant-Disk-Change","content":"Vagrant 은 기본적으로 가상머신을 할당할때 디스크 사이즈가 10G 로 할당되어 있어서 추가로 용량을 잡을때 별도의 디스크를 잡아야 하는 문제가 생긴다. 이를 해결하기 위해서는 직접 virtualbox 을 통해서 디스크 사이즈를 조정해줘야 한다. 디스크 사이즈 변경법 Virtual box VMs 폴더로 이동 cd ~/VirtualBox\\ VMs/&lt;virtualbox folder&gt; vmdk 파일 형식을 vdi 형식으로 변경 (디스크 수정이 가능한 포맷) VBoxManage clonehd &quot;ubuntu-xenial-16.04-cloudimg.vmdk&quot; &quot;ubuntu-xenial-16.04-cloudimg.vdi&quot; --format vdi 디스크 사이즈 변경 VBoxManage modifyhd &quot;ubuntu-xenial-16.04-cloudimg.vdi&quot; --resize 40960 가상머신에서 수정한 디스크로 변경 결과","keywords":""},{"title":"Vagrant 사용법","type":0,"sectionRef":"#","url":"/blog/blog/Vagrant-사용법","content":"","keywords":""},{"title":"설치환경​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#설치환경","content":"virtualbox 설치 - 추가 virtualbox 확장설치  Hyper-V 설정 "},{"title":"설치절차​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#설치절차","content":"우분투 sudo apt install virtualbox 윈도우즈 Download https://releases.hashicorp.com/vagrant/2.2.2/vagrant_2.2.2_x86_64.msiinstall package 맥 https://releases.hashicorp.com/vagrant/2.2.2/vagrant_2.2.2_x86_64.dmginstall package Vagrantfile Vagrantfile 내용 # -*- mode: ruby -*- # vi: set ft=ruby : # vagrant 버쟌 설정 Vagrant.configure(&quot;2&quot;) do |config| # box 이름 지정 # https://app.vagrantup.com/boxes/search 에서 검색가능 config.vm.box = &quot;CentosBox/Centos7-v7.3-Minimal&quot; # vagrant 가상머신 이름지정 config.vm.define :node01 do |node01| # 호스트이름 지정 node01.vm.hostname = &quot;node01&quot; # 네트워크 설정 (브릿지 네트워크) node01.vm.network :&quot;public_network&quot;, ip: &quot;192.168.1.195&quot;, bridge: &quot;enp6s0&quot; # virtualbox 설정 node01.vm.provider &quot;virtualbox&quot; do |vb| # 메모리 설정 vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, 1024*2] vb.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;node01&quot;] # 디스크 설정 # 만약에 파일이 존재하지 않을경우 디스크 파일 생성 if !File.exist?(&quot;mst01.vdi&quot;) vb.customize [&quot;createhd&quot;, &quot;--filename&quot;, &quot;mst01.vdi&quot;, &quot;--size&quot;, 1024*10, &quot;--variant&quot;, &quot;Fixed&quot;] vb.customize [&quot;modifyhd&quot;, &quot;mst01.vdi&quot;, &quot;--type&quot;, &quot;shareable&quot;] end # 해당 파일 병으로 디스크 추가 vb.customize [&quot;storageattach&quot;, :id, &quot;--storagectl&quot;, &quot;SATA&quot;, &quot;--port&quot;, 1, &quot;--device&quot;, 0, &quot;--type&quot;, &quot;hdd&quot;, &quot;--medium&quot;, &quot;mst01.vdi&quot;] if !File.exist?(&quot;mst02.vdi&quot;) vb.customize [&quot;createhd&quot;, &quot;--filename&quot;, &quot;mst02.vdi&quot;, &quot;--size&quot;, 1024*4, &quot;--variant&quot;, &quot;Fixed&quot;] vb.customize [&quot;modifyhd&quot;, &quot;mst02.vdi&quot;, &quot;--type&quot;, &quot;shareable&quot;] end vb.customize [&quot;storageattach&quot;, :id, &quot;--storagectl&quot;, &quot;SATA&quot;, &quot;--port&quot;, 2, &quot;--device&quot;, 0, &quot;--type&quot;, &quot;hdd&quot;, &quot;--medium&quot;, &quot;mst02.vdi&quot;] if !File.exist?(&quot;mst03.vdi&quot;) vb.customize [&quot;createhd&quot;, &quot;--filename&quot;, &quot;mst03.vdi&quot;, &quot;--size&quot;, 1024*4, &quot;--variant&quot;, &quot;Fixed&quot;] vb.customize [&quot;modifyhd&quot;, &quot;mst03.vdi&quot;, &quot;--type&quot;, &quot;shareable&quot;] end vb.customize [&quot;storageattach&quot;, :id, &quot;--storagectl&quot;, &quot;SATA&quot;, &quot;--port&quot;, 3, &quot;--device&quot;, 0, &quot;--type&quot;, &quot;hdd&quot;, &quot;--medium&quot;, &quot;mst03.vdi&quot;] end end config.vm.define :node02 do |node02| node02.vm.hostname = &quot;node02&quot; node02.vm.network :&quot;public_network&quot;, ip: &quot;192.168.1.196&quot;, bridge: &quot;enp6s0&quot; node02.vm.provider &quot;virtualbox&quot; do |vb| vb.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, 1024*2] vb.customize [&quot;modifyvm&quot;, :id, &quot;--name&quot;, &quot;node02&quot;] if !File.exist?(&quot;ost1.vdi&quot;) vb.customize [&quot;createhd&quot;, &quot;--filename&quot;, &quot;ost1.vdi&quot;, &quot;--size&quot;, 1024*10, &quot;--variant&quot;, &quot;Fixed&quot;] vb.customize [&quot;modifyhd&quot;, &quot;ost1.vdi&quot;, &quot;--type&quot;, &quot;shareable&quot;] end vb.customize [&quot;storageattach&quot;, :id, &quot;--storagectl&quot;, &quot;SATA&quot;, &quot;--port&quot;, 1, &quot;--device&quot;, 0, &quot;--type&quot;, &quot;hdd&quot;, &quot;--medium&quot;, &quot;ost1.vdi&quot;] if !File.exist?(&quot;ost2.vdi&quot;) vb.customize [&quot;createhd&quot;, &quot;--filename&quot;, &quot;ost2.vdi&quot;, &quot;--size&quot;, 1024*4, &quot;--variant&quot;, &quot;Fixed&quot;] vb.customize [&quot;modifyhd&quot;, &quot;ost2.vdi&quot;, &quot;--type&quot;, &quot;shareable&quot;] end vb.customize [&quot;storageattach&quot;, :id, &quot;--storagectl&quot;, &quot;SATA&quot;, &quot;--port&quot;, 2, &quot;--device&quot;, 0, &quot;--type&quot;, &quot;hdd&quot;, &quot;--medium&quot;, &quot;ost2.vdi&quot;] if !File.exist?(&quot;ost3.vdi&quot;) vb.customize [&quot;createhd&quot;, &quot;--filename&quot;, &quot;ost3.vdi&quot;, &quot;--size&quot;, 1024*4, &quot;--variant&quot;, &quot;Fixed&quot;] vb.customize [&quot;modifyhd&quot;, &quot;ost3.vdi&quot;, &quot;--type&quot;, &quot;shareable&quot;] end vb.customize [&quot;storageattach&quot;, :id, &quot;--storagectl&quot;, &quot;SATA&quot;, &quot;--port&quot;, 3, &quot;--device&quot;, 0, &quot;--type&quot;, &quot;hdd&quot;, &quot;--medium&quot;, &quot;ost3.vdi&quot;] end end end  기본명령어 "},{"title":"vagrant snapshot list​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-snapshot-list","content":"현재 스냅샷 목록을 불려온다 "},{"title":"vagrant snapshot save [name]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-snapshot-save-name","content":"해당 스냅샷 이름으로 저장한다 "},{"title":"vagrant snapshot resotere [name]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-snapshot-resotere-name","content":"해당 스냅샷 이름으로 복구한다 "},{"title":"vagrant init [name [url]]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-init-name-url","content":"현재 디렉터리룰 Vagrant 환경으로 초기화한다.  vagrant init ubuntu/trusty64 vagrant up  "},{"title":"vagrant up [name|id]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-up-nameid","content":"이 명령은 Vagrant 파일에 따라 가상머신을 생성 및 구성한다 "},{"title":"vagrant reload [name|id]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-reload-nameid","content":"해당 가상머신을 종료하고 다시 실행한다 "},{"title":"vagrant halt [name|id]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-halt-nameid","content":"해당 가상머신을 종료한다 "},{"title":"vagrant suspend [name|id]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-suspend-nameid","content":"해당 가상머신을 일시중지 한다 "},{"title":"vagrant status [name|id]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-status-nameid","content":"현재 가상머신들의 상태를 표시한다 "},{"title":"vagrant ssh [name|id][-- extra_ssh_args]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-ssh-nameid","content":"해당 가상머신으로 ssh 접속을 한다. "},{"title":"vagrant destroy [name|id]​","type":1,"pageTitle":"Vagrant 사용법","url":"/blog/blog/Vagrant-사용법#vagrant-destroy-nameid","content":"해당 가상머신을 삭제한다. "},{"title":"Vagrant 에서 메모리 CPU 코어수 조정","type":0,"sectionRef":"#","url":"/blog/blog/Vagrant-에서-메모리-CPU-코어수-조정","content":"메모리 할당을 설정시 Vagrantfile 에서 다음 항목을 추가한다. config.vm.customize [&quot;modifyvm&quot;, :id, &quot;--memory&quot;, 2048] 아니면 CPU 설정시 다음 항목을 수정한다. config.vm.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, 2] Vagrantfile 예시 # -*- mode: ruby -*- # vi: set ft=ruby : hosts = { &quot;n1&quot; =&gt; &quot;192.168.77.10&quot;, &quot;n2&quot; =&gt; &quot;192.168.77.11&quot;, &quot;n3&quot; =&gt; &quot;192.168.77.12&quot;, &quot;n4&quot; =&gt; &quot;192.168.77.13&quot;, } Vagrant.configure(&quot;2&quot;) do |config| config.ssh.insert_key = false config.ssh.forward_agent = true check_guest_additions = false functional_vboxsf = false config.vm.box = &quot;bento/ubuntu-16.04&quot; hosts.each do |name, ip| config.vm.define name do |machine| machine.vm.network :private_network, ip: ip machine.vm.provider &quot;virtualbox&quot; do |v| v.customize [&quot;modifyvm&quot;, :id, &quot;--cpus&quot;, 2] v.name = name end end end end ","keywords":""},{"title":"vscode 특정폴더 숨기기","type":0,"sectionRef":"#","url":"/blog/blog/vscode-특정폴더-숨기기","content":"","keywords":""},{"title":"설정​","type":1,"pageTitle":"vscode 특정폴더 숨기기","url":"/blog/blog/vscode-특정폴더-숨기기#설정","content":"vscode 설정창으로 이동 {% asset_img &quot;img1.png&quot; &quot;spaced title&quot; %}사용자 설정에서 검색창에 exclude 을 입력후에 Files.Execlude 항목에서 숨길 폴더 추가 {% asset_img &quot;img2.png&quot; &quot;spaced title&quot; %} "},{"title":"WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 해결하기","type":0,"sectionRef":"#","url":"/blog/blog/WARNING-REMOTE-HOST-IDENTIFICATION-HAS-CHANGED-해결하기","content":"[user@hostname ~]$ ssh root@pong @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the RSA key sent by the remote host is 6e:45:f9:a8:af:38:3d:a1:a5:c7:76:1d:02:f8:77:00. Please contact your system administrator. Add correct host key in /home/hostname /.ssh/known_hosts to get rid of this message. Offending RSA key in /var/lib/sss/pubconf/known_hosts:4 RSA host key for pong has changed and you have requested strict checking. Host key verification failed. 원인 known_hosts 파일에 저장되어 있는 정보하고 접속하려는 호스트와의 fingerprint 불일치 조치 다음 명령어를 실행 ssh-keygen -R &lt;host&gt; ","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":""},{"title":"webpack devserver proxy 설정법","type":0,"sectionRef":"#","url":"/blog/blog/webpack-devserver-proxy-설정법","content":"package.json 파일에서 &quot;proxy&quot;: &quot;http://localhost:&lt;PORT-GOES-HERE&gt;&quot; 설정한다 package.json 예시 { &quot;name&quot;: &quot;client&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;private&quot;: true, &quot;dependencies&quot;: { &quot;react&quot;: &quot;^16.3.2&quot;, &quot;react-dom&quot;: &quot;^16.3.2&quot;, &quot;react-scripts&quot;: &quot;1.1.4&quot; }, &quot;scripts&quot;: { &quot;start&quot;: &quot;react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot; }, &quot;proxy&quot;: &quot;http://localhost:&lt;PORT-GOES-HERE&gt;&quot; } ","keywords":""},{"title":"맥에서 sshpass 이용하기","type":0,"sectionRef":"#","url":"/blog/blog/맥에서-sshpass-이용하기","content":"맥에서 sshpass 을 설치하기 위해서는 콘솔창에서 다음 명령어로 설치한다. $ brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb ","keywords":""},{"title":"yarn 캐쉬 지우기","type":0,"sectionRef":"#","url":"/blog/blog/yarn-캐쉬-지우기","content":"가끔 맵리듀스 작업을 하다보면, yarn 에 캐쉬가 많이 남아 있어서 충돌이 발생하는 경우가 발생한다. 초기화을 하자 yarn cache 저장위치 확인하기 yarn-site.xml 파일에 yarn.nodemanager.local-dirs 위치 확인하기 &lt;property&gt; &lt;name&gt;yarn.nodemanager.local-dirs&lt;/name&gt; &lt;value&gt;/hadoop/yarn/local&lt;/value&gt; &lt;/property&gt; 해당 폴더의 내용 지우기 [yarn@node2 ~]$ cd /hadoop/yarn/local/ [yarn@node2 local]$ ls filecache nmPrivate spark_shuffle usercache [yarn@node2 local]$ rm -rf filecache/ usercache/ yarn 재시작","keywords":""},{"title":"지뢰찾기 구현","type":0,"sectionRef":"#","url":"/blog/blog/지뢰찾기-구현","content":"","keywords":""},{"title":"실행 방법​","type":1,"pageTitle":"지뢰찾기 구현","url":"/blog/blog/지뢰찾기-구현#실행-방법","content":"node.js , npm 을 설치 합니다.the-mine-sweeper 폴더로 이동후에 다음 명령어를 실행합니다. $ npm install node module 을 설치 하고 나서 다음 명령어를 입력하여 dev server 을 실행합니다. $ npm start  "},{"title":"권장 사항​","type":1,"pageTitle":"지뢰찾기 구현","url":"/blog/blog/지뢰찾기-구현#권장-사항","content":"최신 버젼의 Chrome, Firefox, Safari, Edge 에서 실행을 권장합니다. "},{"title":"빌드방법​","type":1,"pageTitle":"지뢰찾기 구현","url":"/blog/blog/지뢰찾기-구현#빌드방법","content":"the-mine-sweeper 폴더로 이동후에 다음 명령어를 실행합니다. $ npm run build the-mine-sweeper/build 폴더내의 파일들을 웹서버에 업로드 합니다. 만약 직접 실행할경우 다음 명령어를 입력합니다. $ npm install -g serve $ serve -s build  "},{"title":"Example​","type":1,"pageTitle":"지뢰찾기 구현","url":"/blog/blog/지뢰찾기-구현#example","content":"다음 홈페이지에 접속하면 실제 페이지를 볼수 있습니다. https://hardwooooooork.github.io/the-mine-sweeper/ "},{"title":"우분투 18.04 최대절전모드 활성화","type":0,"sectionRef":"#","url":"/blog/blog/우분투-18-04-최대절전모드-활성화","content":"터미널 창에서 다음 명령어로 최대절전모드가 작동이 되는지 확인 sudo systemctl hibernate 그놈메뉴에 최대절전모드 활성화 하기 터미널창에 다음 명령어를 입력하여 환경설정 파일 열기 sudo gedit /etc/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla 파일에 다음과 같은 내용을 입력 [Re-enable hibernate by default in upower] Identity=unix-user:* Action=org.freedesktop.upower.hibernate ResultActive=yes [Re-enable hibernate by default in logind] Identity=unix-user:* Action=org.freedesktop.login1.hibernate;org.freedesktop.login1.handle-hibernate-key;org.freedesktop.login1;org.freedesktop.login1.hibernate-multiple-sessions;org.freedesktop.login1.hibernate-ignore-inhibit ResultActive=yes 시스템 재시작 및 그놈 확장 설치 : Hibernate Status Button.","keywords":""}]