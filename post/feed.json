{
    "version": "https://jsonfeed.org/version/1",
    "title": "One hundred million gold Blog Blog",
    "home_page_url": "https://100milliongold.github.io/blog/post",
    "description": "One hundred million gold Blog Blog",
    "items": [
        {
            "id": "https://100milliongold.github.io/blog/post/2023/02/15/자바스크립트와-엔진",
            "content_html": "<p>자바스크립트의 특성과 자바스크립트로 작성된 코드의 실행을 담당하는 엔진의 특성에 대해 알아보자.</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"11-자바스크립트의-특성\">1.1. 자바스크립트의 특성<a href=\"#11-자바스크립트의-특성\" class=\"hash-link\" aria-label=\"1.1. 자바스크립트의 특성에 대한 직접 링크\" title=\"1.1. 자바스크립트의 특성에 대한 직접 링크\">​</a></h2><p>javascript는 웹을 구성하는 3대장 중 하나다. HTML 그리고 CSS와 함께 웹 페이지를 구성하는데 사용된다. HTML이 웹페이지의 UI 구성을 만드는데 사용되고 CSS가 스타일링을 입힌 다면, 그 둘을 유저와의 상호작용을 구현하는데 javascript를 사용한다.\n초보자들이 배우기 쉽고 매우 자유로운 언어라고 한다.\n자유롭다는 말은 문법이 간단하고 멀티-패러다임 언어로 명령형, 함수형, 객체지향형 언어등 다양하게 활용이 가능해서 그런것 같다.\n또한 객체 기반의 언어지만 하지만 상속과 클래스라는 개념은 없다.\n(이 부분은 추가 리서치 필요)</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"12-크롬-v8엔진\">1.2. 크롬 V8엔진<a href=\"#12-크롬-v8엔진\" class=\"hash-link\" aria-label=\"1.2. 크롬 V8엔진에 대한 직접 링크\" title=\"1.2. 크롬 V8엔진에 대한 직접 링크\">​</a></h2><p>자바스크립트는 실행되는 환경에 따라 사용되는 엔진이 상이하기도 하다.\n일반적으로 chrome에 내장된 chrome V8 엔진이 대표적이다.\nV8엔진에 의해 실행되는 javascript는 compile(번역)과 interpreter(통역) 두개의 일련의 과정을 거쳐야한다.\n여담으로 V8엔진에는 원래 interpreter가 없었지만 2017년 5.9버전이 나오면서 추가 되었다.</p><p>어쨋든 compile도 하고 interpret도 거쳐야 하는 자바스크립트는 컴파일언어라고 하기도,\n인터프리터 언어라고 하기도 애매하다.</p><p>아무튼 compile과 interpreter 두 개의 과정을 거치는 것이 특징인 자바스크립트는 이 과정들을 머신코드로 해석되고 통역되어 브라우저에서 인식할 수 있게 된다.\n또 다른 특징은 JIT(just-in-time)이라고 불리는 방식으로 위의 과정을 거치는데\n말 그대로 브라우저가(대표적인 javascript가 실행되는 환경) javascript를 읽어 들이는 순간부터 compiler과 interpreter가 실행된다는 것이다.</p><p>그래도 가장 대표적인 특징은 V8엔진은 자바스크립트 코드를 단일 스레드, call stack에서 동기적으로 실행 한다.\n이는 아마 V8엔진이 JIT 방식으로 compile과 interprete를 거쳐 머신 코드로 변환시키기 때문에 안정화 때문이지 않을까 하는 추측을 해본다.</p><h1>2. 자바스크립트 엔진의 실행 방식</h1><p>자바스크립트 엔진, 대표적으로 V8은 자바스크립트 코드를 <strong>동기적</strong>으로 실행 한다고 했다.\n그럼 동기적으로 실행한다는 것이 무슨 뜻일까? 엔진 내부를 살짝 들여다보면서 살펴보자.</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"21-동기적인-실행-방식\">2.1. 동기적인 실행 방식<a href=\"#21-동기적인-실행-방식\" class=\"hash-link\" aria-label=\"2.1. 동기적인 실행 방식에 대한 직접 링크\" title=\"2.1. 동기적인 실행 방식에 대한 직접 링크\">​</a></h2><p>동기적으로 어떤 작업들을 한다는 말은 작업들을 한 작업 한 작업씩 처리한다는 뜻이다.\n조금 더 자세히 살펴보자.\nV8엔진은 싱글 스레드인 하나의 <strong>call stack</strong>을 가지고 있다.\n작업을 처리하는 공간인 call stack은 하나 밖에 없기 때문에 실행이 필요한 javascript 코드들은 이 하나의 call stack에 차곡 차곡 쌓인다.\n만약 5개의 코드가 실행이 필요해 call stack에 차곡 차곡 쌓였다.\n(실행 순서는 나중에 조금 더 자세히 살펴볼 것이다. 지금은 단지 동기적 처리 방식에 대해서만 설명)\n이 5개의 작업들을 동기적으로 처리하면 다음과 같은 순서로 진행될 것이다.</p><ol><li>첫 번째 순서의 코드가 실행이 된다.</li><li>이 때 다음 순서인 두 번째 순서의 코드는 실행이 되지 않는다. 그 대신 첫 번째 순서의 코드의 실행이 완료될 때 까지 대기하게 된다.</li><li>일정 시간이 흐른 후 첫 번째 순서의 코드 실행이 완료되었다. 이제 두 번째 순서의 코드 실행이 시작된다.</li><li>똑같이 세 번째 순서의 코드는 실행이 되지 않고 자신 앞 순서의 코드 실행이 완료 될 때까지 대기한다.</li><li>쭉 반복</li></ol><p>이렇게 작동하는 것이 동기적인 작동 방식인데 실행의 <strong>요청</strong>에 의해 작업이 시작되고 <strong>응답</strong>이 오면 작업을 완료하고 종료시킨다. 그 후 다음 작업에 대해 실행을 시작한다.\n자바스크립트 엔진의 call stack은 이 방식으로 javascript 코드를 실행한다.\n하지만 그 순서가 조금은 특이한데 바로 first-in, last-out, 즉 선입후출 방식으로 진행된다.</p><p>말로 먼저 설명하자면 함수 호출의 코드를 엔진이 읽어 들이면 call stack에 쌓는다.\n근데 방금 호출된 함수 안에는 또 다른 함수의 호출이 있다.\n그럼 안에서 호출된 함수에 대응하여 그 함수의 실행을 call stack에 쌓는데 이때는 처음 쌓인 call stack 위에 쌓인다.\n안에서 호출된 함수 내부에는 또 다른 함수 호출이 없다. 그래서 엔진은 call stack에 쌓인\n함수들을 실행하려 하는데 이 때 늦게 들어온 순서대로 코드실행을 진행한다.</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"22-예제\">2.2. 예제<a href=\"#22-예제\" class=\"hash-link\" aria-label=\"2.2. 예제에 대한 직접 링크\" title=\"2.2. 예제에 대한 직접 링크\">​</a></h2><p>말로하니 역시나 어렵다. 다음 예제로 살펴보자.</p><div class=\"codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">const funcOne =() =&gt; {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  2️⃣console.log(\"No.1\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  3️⃣funcTwo()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">const funcTwo =() =&gt; {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  4️⃣console.log(\"No.2\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  5️⃣funcThree()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">const funcThree =()=&gt; {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  6️⃣console.log(\"No.3\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">1️⃣funcOne()</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">// 결과값</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">'No.1'</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">'No.2'</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">'No.3'</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>위 코드는 중첩된 함수에 대한 예제이다. 실제로 호출이 되면 call stack에 쌓이는 모습을 살펴보자.</p><p>위의 움짤처럼 쌓이고 위의 쌓인 순서대로 실행되고 실행이 완료되면 사라진다.\n함수가 호출되어 call stack에 쌓이면 내부 코드를 순서대로 call stack에 쌓는걸 볼 수 있다.\n그 후 함수 내부에 다른 함수의 호출이 존재하면 그 함수를 call stack에 쌓는데\n그 함수가 실행이 완료되어 call stack에서 사라지기전에 외부함수의 실행도 완료되지 않는점을 명심하자.</p><h1>3. 비동기 함수와 자바스크립트 엔진</h1><p>javascrit 엔진 V8이 자바스크립트 코드를 실행하는 과정을 보면 정말 똑똑하다.\n(실제로 공식 문서를 보면 매번 업데이트에 성능 향상과 최적화에 엄청 공을 들인다.)\n성능적으로도 똑똑하지만 (컴퓨터도, 인터넷도 성능이 뛰어난 요즘시대이기에 처음 자바스크립트를 실행시켰을 때\n나는 동기적으로 한번에 실행된다고 느꼈다. 하지만 정말 미묘하게 아~주 미묘하게 순서대로 실행되는 것이였다.) 브라우저애서 실행 된다는 점에서 JIT방식으로 실행을 하기 때문에 코드을 읽어 들어와 연산하여 인식하는 과정은 조금 불안정할 수 도 있다.\n그렇기 때문에 동기적인 방식으로 실행하는 것 같다는 느낌이 든다.\n순차대로 적은 코드들에 대해 순서를 보장해 주는 것이다.\n그래서 자바스크립트 엔진을 어느 정도 (아주 조금이지만) 파해쳐보니\n조금 더 효율적이고 나은 코드 작성을 준수해야 되겠다는 생각이 크게 든다.\n(hoisting, execution context, lexical closure 등과 함께 날잡고 정리해야겠다.)</p><p>하지만 자바스크립트 엔진이 아무리 최적화하여 똑똑하게 실행을 처리한다고 한들 순서가 보장되지 못하는 경우가 발생하기도 한다. 바로 비동기 함수다.\n간단하게 비동기 함수는 자바스크립트의 원칙, 실행 순서를 보장 받는다,를 깨고 비동기로 처리된다. 즉 순서를 보장받지 못하고 뒤로 밀리게 된다.\n그럼 비동기 함수는 무엇이며 자바스크립트 엔진은 왜 이런식으로 처리하는 것일까?</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"31-비동기-함수\">3.1. 비동기 함수<a href=\"#31-비동기-함수\" class=\"hash-link\" aria-label=\"3.1. 비동기 함수에 대한 직접 링크\" title=\"3.1. 비동기 함수에 대한 직접 링크\">​</a></h2><p>대표적인 비동기 함수는 <strong>DOM 이벤트</strong> <strong>API요청</strong> <strong>setTimeout</strong>같은 내장 함수들이 있다.\nsetTimeout으로 대표되는 DOM API, fetch 등으로 대표되는 XMLHttpRequest 등의 AJAX 등이 바로 비동기로 처리되는 대표적인 함수들이다.\n그런데 이들의 위치가 조금 생소하다. 이 형태를 javascript runtime의 모습으로 살펴보자.</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"32-javascript-runtime\">3.2. Javascript Runtime<a href=\"#32-javascript-runtime\" class=\"hash-link\" aria-label=\"3.2. Javascript Runtime에 대한 직접 링크\" title=\"3.2. Javascript Runtime에 대한 직접 링크\">​</a></h2><p>자바스크립트 엔진에는 memory heap이라는 공간도 존재한다.\n설명상으로는 변수와 객체에 대한 모든 메모리 할당이 이루어 지는 곳이라고 하는데\n조금 더 리서치가 필요한 부분이다.\n하지만 이번 자바스크립트의 코드 실행 방식에는 큰 영향을 주는 것 같지 않다. (그래서 넘어가겠다는 소리)</p><p>어찌돼었던 이런 자바스크립트의 실행환경을 보면 엔진 밖에 <strong>Web API</strong>들이 모여있는 곳이 있다.\n자바스크립트 엔진이 제공하는 것이 아닌 브라우저에서 제공해주는 것이다.\n다시 말해 이들은 다른 누군가에 의해 정의되고 브라우저에 내장된 내장함수라고 생각해도 무관한데 이들은 <strong>비동기 함수</strong>이고 브라우저에 위치하고 있다.</p><p>다른말로는 자바스크립트 엔진이 콜스텍에 쌓고 실행을 처리하는 함수는<strong>우리가 자바스크립트라는 언어로 작성한 커스텀 함수다.</strong></p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"33-자바스크립트-엔진의-코드-처리-방식\">3.3. 자바스크립트 엔진의 코드 처리 방식<a href=\"#33-자바스크립트-엔진의-코드-처리-방식\" class=\"hash-link\" aria-label=\"3.3. 자바스크립트 엔진의 코드 처리 방식에 대한 직접 링크\" title=\"3.3. 자바스크립트 엔진의 코드 처리 방식에 대한 직접 링크\">​</a></h2><p>자바스크립트 엔진은 자바스크립트로 작성된 코드들의 실행을 담당한다.\n물론 실행을 하기 위해 머신코드로 변환하는 작업을 거치긴 하지만 지금은 논외로 해보자.</p><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"331-일반적인-코드-처리\">3.3.1. 일반적인 코드 처리<a href=\"#331-일반적인-코드-처리\" class=\"hash-link\" aria-label=\"3.3.1. 일반적인 코드 처리에 대한 직접 링크\" title=\"3.3.1. 일반적인 코드 처리에 대한 직접 링크\">​</a></h3><p>자바스크립트로 작성된 코드는 순차적으로 call stack에 쌓이게 된다.\ncall stack에 쌓이는 순간은 바로 코드가 해당 코드를 실행시키도록 작성되어있을 때 이다.\n즉 자바스크립트 엔진은 call stack에 코드를 실행하라고 <strong>요청</strong>을 보내고 그 요청이 call stack에 쌓이는 것이다.\n그러면 call stack에서는 해당 코드에 대한 작업을 하고 완료되면 <strong>응답</strong>을 보내 call stack에서 빼버린다.\n명심해야 할 것은 코드 작업의 실행과정은 <strong>요청</strong>과 <strong>응답</strong> 이라는 것이다.\n하나의 코드 실행은 <strong>요청</strong>에 의해 작업이 시작되고 완료되어 <strong>응답</strong>이 오면 비로소 <strong>완료</strong>되어 사라지는 것이다.</p><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"332-비동기-함수-처리\">3.3.2. 비동기 함수 처리<a href=\"#332-비동기-함수-처리\" class=\"hash-link\" aria-label=\"3.3.2. 비동기 함수 처리에 대한 직접 링크\" title=\"3.3.2. 비동기 함수 처리에 대한 직접 링크\">​</a></h3><p>만약 우리가 Web API 작업을 포함하는 함수를 자바스크립트로 작성하고 실행시킨다고 가정해보면\ncall stack에 쌓고 실행 요청을 보낸다.\n함수 내부를 살펴보니 Web API를 실행해야하는데 자바스크립트 엔진내에 존재하는 함수가 아니다.\n그러면 자바스크립트는 이 실행을 본인 내부에서 하지 않고 Web API가 있는곳에 그에 관련한 요청을 보낸다.\n요청에 대한 <strong>응답</strong>으로 필요한 다른 <strong>응답</strong>에 대해 다른곳에 <strong>요청</strong>을 보내는 것이다.\n그 요청을 비동기 함수의 callback함수와 같이 보낸다.\n브라우저는 <strong>요청</strong>에 대한 <strong>응답</strong>으로 callback함수를 보내오는데 그 응답을 call stack에서 처리한다. 그러면 예제의 실행은 <strong>완료</strong>되는데 자바스크립트는 비동기 함수를 조금 특이하게 처리한다.</p><p>앞서 call stack에 요청된 Web API의 실행은 call stack에서 하지 않고 Web API에 위임한다고 했다.\n이때 call stack에서는 해당 요청을 사라진다. 즉 해당 요청에 대한 응답을 본인이 처리하지 않기에 브라우저에 요청을 보내고 해당 작업에 대한 모든 정보를, 즉 callback을 call stack에서는 Web API쪽으로 함께 보내버리는 것이다.(위임)\n그렇기 때문에 같이 보내진 콜백 함수는 순서를 보장 받기도 전에 다른 곳에 위임이 되어버린다.</p><p>하지만 브라우저는 Web API 실행 요청에 대한 응답으로 callback 함수를 보내고 그 함수를 다시 call stack에서 처리한다고 하지 않았는가?\n브라우저의 응답으로 온 callback 함수를 실행하라고 call stack에 요청하고 쌓는다.\n이때는 제대로 실행 순서를 보장받는다.</p><p>쉽게 말해 어린아이가 귤을 먹고 싶은데 (call stack에 요청) 껍질을 본인이 깔 수 없어 엄마한테 껍질을 까달라고 요청하고 (Web API 요청 with callback)\n그 요청의 응답으로 알맹이가 돌아오고 (콜백) 그 알맹이를 먹을 수 있게 (call stack에서 실행) 되는 것이다.</p><p>그렇기 때문에 call stack은 본인이 수행할 수 있는 요청이 아니기에 브라우저에 껍대기를 까달라고 요청과 함께 비동기 함수안에 정의된 callback 함수도 함께 보낸다.\n(API 함수에 대한 실행요청으로 실행하려 했지만 실행을 하지도 않고 다른곳으로 위임한다.\n그리고 내부에 정의된 콜백함수는 순서를 배정받기도 전에 같이 보내지는 것이다.)\n그 후 브라우저에서 껍대기를 까고 알맹이를 돌려주면 (callback 함수) 다시 call stack에서 실행을 요청하고 연산 후 응답으로 보내주면 실행을 완료하고 call stack에서 사라진다.</p><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"333-callback-queue와-event-loop\">3.3.3. callback queue와 event loop<a href=\"#333-callback-queue와-event-loop\" class=\"hash-link\" aria-label=\"3.3.3. callback queue와 event loop에 대한 직접 링크\" title=\"3.3.3. callback queue와 event loop에 대한 직접 링크\">​</a></h3><p>하지만 그 callback 함수가 call stack으로 들어가기전에 규칙이 있다.\nWeb API가 요청으로 응답을 보내주기까지 call stack은 기다리지 않고 다른 일을 순차적으로 동기적으로 처리한다.\n아직 100개의 일이 call stack에서 처리되어야 한다고 가정해보자.\ncallback함수는 그 중간에 끼어들어 순서를 바꿔버릴까?\n그렇게 되면 코드 실행은 엉창진창이 되버릴 것이다.\n그래서 대신 callback queue라는 곳에서 기다린다. 일종의 유명한 식당에서 줄을 서며 기다리는 것이다. 이 callback queue에서 기다리가닥 들어온 순서대로 call stack으로 옮겨지는데\nevent loop라는 친구가 항상 call stack과 callback queue를 지켜보고 있다가 call stack이 비워지게 되면 callback queue에서 대기중인 함수 실행을 call stack을 보내 callback 함수를 실행하게 된다.\n결국 call stack과 callback queue는 동기적으로 작동하는데 비동기 함수는 그 순서가 밀리는 것이다.</p><p>말로하니 역시 어렵다. 예제 코드를 작성하고 어떤 이동이 일어나는지 살펴보자.</p><div class=\"codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">let someVal = 1</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">let API_EXAMPLE = ()=&gt; {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    setTimeout(function() {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        someVal + 10</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    },3000)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    return someVal</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">let someFinalVal = API_EXAMPLE() + 100</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">console.log(someFinalVal)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>콘솔창에 어떤 결과값이 찍힐까? 111? 아니면 101? 진행과정을 보고 한번 살펴보자.</p><p><img loading=\"lazy\" alt=\"image\" src=\"/blog/assets/images/test-18ae8c4b0e5a404bca076669945c4b02.gif\" width=\"480\" height=\"360\" class=\"img_ev3q\"></p><p><code>setTimeout</code>이라는 Web API는 비동기 방식으로 처리되었기 때문에<code>someVal</code>1에 10을 더하지 못한채 <code>API_EXAMPLE</code>함수 실행은 완료되었다.\n그래서 결국 콘솔에 찍힐 <code>someFinalVal</code>의 값은 1+100인 101이 되는 것이다.</p><p>이렇게 자바스크립트 엔진은 비동기 함수를 실행시킬 때 그 안에 작성된 콜백 함수를 Web API를 처리하는 곳으로 보내고 비동기 함수가 실행되는 동안 call stack에 보장된 순서대로 다음 함수들을 처리한다.\n그 사이 비동기 함수가 연산을 마치면 같이 보내진 콜백 함수를 callback queue로 보내고\nevent loop가 지켜보고 있다가 call stack이 비워지면 콜백 함수를 call stack에 다시 밀어넣고 보장된 순서대로 실행 시키는 것이 바로 자바스크립트가 비동기 함수를 처리하는 방법이다.</p><p>비동기 함수가 어떻게 처리되는지 알아봤는데 왜 자바스크립트 엔진은 헷갈리게 브라우저 내장 함수들을 이렇게 처리하는지 이유에 대해서 알아보자.</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"34-비동기-처리-방식의-이유\">3.4. 비동기 처리 방식의 이유<a href=\"#34-비동기-처리-방식의-이유\" class=\"hash-link\" aria-label=\"3.4. 비동기 처리 방식의 이유에 대한 직접 링크\" title=\"3.4. 비동기 처리 방식의 이유에 대한 직접 링크\">​</a></h2><p>이유는 간단하게 blocking script를 방지하기 위해서다.\n위의 예제에서 setTimeout라는 Web API를 사용했는데\n이 함수는 지정된 시간이 지난 후 실행 되는 대표적인 비동기 함수다.\n예제에 이 함수를 사용한 이유는 <code>fetch</code>나 <code>axios</code> 등으로 대표되는\n서버와의 통신으로 데이터를 받아오는데 사용되는 Web API를 구현하기 위해서다.\n만약 통신으로 데이터를 받아오는데 위 예제처럼 3초가 아니라 10분이 걸린다고 가정해보자.\n그리고 이런 함수를 비동기가 아닌 동기로 처리한다고 가정해보자.</p><p>그러면 10분동안 아무것도 화면에 나오지 않을 것이다.\n만약 통신으로 뉴스의 사진을 받아온다고 가정한다면 통신 다음에 실행되어야 할 코드들이\n실행을 계속 기다리게 된다.\n이것이 바로 <strong>blocking script</strong>다.\n자바스크립트는 동기로 코드를 실행시키는데 한 코드에 소요 되는 시간이 너무 길기 때문에\n그 코드 이후에 실행으로 순서를 부여받은 코드들은 10분을 더 기다려야 실행이 된다.</p><p>하지만 만약 비동기로 처리한다면 어떨까?\n화면에는 사진만 나오지 않고 글은 보일 것이다.\n그리고 유저는 10분뒤 사진을 받아볼 수 있을 것이다.</p><p>AJAX 요청이, 대표적으로, 비동기로 처리되는 이유는 웹 페이지에 필요한 리소스들을 대부분 서버로부터 전송받아 viw에 보여주기 때문이다.\n그런데 이런 리소스들 때문에 스크립트가 막힌다면 페이지 자체를 보여줄 수 없기 때문이다.</p><h1>4. 이슈: 결론은 Promise다.</h1><p>이로 인해 발생하는 이슈는 무엇일까?\n바로 위 예제와 같다.\n만약 서버와의 통신으로 데이터를 받아와서 그 값을 재연산해서 최종값으로 사용하려 한다면\n위의 예제처럼 \"+10\"이라는 재연산을 하지 못한채 값을 사용하게 된다.\n그러면 어떻게 해야할까?\n바로 Promise를 사용하는 것이다.\nPromise는 비동기 함수를 동기적으로 처리할 수 있게 해주는 아주 대단한 친구다.\nPromise에 대한 정리는 다음에 하도록 하겠다.</p><h1>5. 추가: Job Queue</h1><p>인터넷에서 재밌는 글을 읽었는데 바로 Job Queue에 관한 것이다.\n먼저 다시 비동기 함수 작동방식을 살펴보면,\n비동기 함수는 본인의 함수를 실행하고 콜백으로 넘겨진 콜백함수를 callback queue로 보낸다.\n그리고 event loop가 call stack을 지켜보고 있다가 다 비워지면 callback queue에서\nfirst-in, first-out 방식으로 call stack에 밀어 넣는다.\n즉 다른 일반 함수의 실행이 모두 끝나야 비동기 함수가 실행 순서를 배부받고 보장받는 것인데\n비동기 함수는 call stack 맨 끝부분에 추가된다고 봐도 무방하다.\n그런데 이 job queue라는 재밌는 녀석은 비동기 함수한테 조금 더 빠른 순서를 제공한다.\n물론 조건이 필요한데 그 조건은 비동기 함수가 실행되는 현재 함수가 끝나기전에 비동기 함수의 실행이 완료되면 현재 함수의 실행이 완료된 후 바로 실행되는 순서를 제공받는다.\n다시 말해 다른 일반 함수들의 실행이 끝나 call stack이 비워지기 전에 순서를 제공받는 것이다.</p>",
            "url": "https://100milliongold.github.io/blog/post/2023/02/15/자바스크립트와-엔진",
            "title": "1. 자바스크립트와 엔진의 특성",
            "summary": "자바스크립트의 특성과 자바스크립트로 작성된 코드의 실행을 담당하는 엔진의 특성에 대해 알아보자.",
            "date_modified": "2023-02-15T00:00:00.000Z",
            "tags": []
        },
        {
            "id": "https://100milliongold.github.io/blog/post/2023/02/12/이사중/inde",
            "content_html": "<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"이사중\">이사중<a href=\"#이사중\" class=\"hash-link\" aria-label=\"이사중에 대한 직접 링크\" title=\"이사중에 대한 직접 링크\">​</a></h3><p>커스터마이징 하는겸 구글에 노출되기 위해서</p><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"할일\">할일<a href=\"#할일\" class=\"hash-link\" aria-label=\"할일에 대한 직접 링크\" title=\"할일에 대한 직접 링크\">​</a></h3><ul class=\"contains-task-list containsTaskList_mC6p\"><li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> <!-- -->메인화면 제작</li><li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> <!-- -->곳곳에 있는 자료들 통합</li><li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> <!-- -->사이트 등록</li><li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"> <!-- -->댓글 기능 개발</li></ul>",
            "url": "https://100milliongold.github.io/blog/post/2023/02/12/이사중/inde",
            "title": "다시 깃헙페이지로 이사갑니다.",
            "summary": "이사중",
            "date_modified": "2023-02-12T18:14:58.000Z",
            "tags": []
        },
        {
            "id": "https://100milliongold.github.io/blog/post/NestJS-오류-TypeError-0-cookieparser1.default-is-not-a-function",
            "content_html": "<p>아래와 같은 오류를 만났다.</p><div class=\"language-bash codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-bash codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">Nest</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">21927</span><span class=\"token plain\">  - </span><span class=\"token number\" style=\"color:#36acaa\">2021</span><span class=\"token plain\">. </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">. 09. 오후 </span><span class=\"token number\" style=\"color:#36acaa\">3</span><span class=\"token plain\">:38:42     LOG </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">InstanceLoader</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> TypeOrmCoreModule dependencies initialized +47ms</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">Nest</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">21927</span><span class=\"token plain\">  - </span><span class=\"token number\" style=\"color:#36acaa\">2021</span><span class=\"token plain\">. </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">. 09. 오후 </span><span class=\"token number\" style=\"color:#36acaa\">3</span><span class=\"token plain\">:38:42     LOG </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">InstanceLoader</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> TypeOrmModule dependencies initialized +1ms</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">Nest</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">21927</span><span class=\"token plain\">  - </span><span class=\"token number\" style=\"color:#36acaa\">2021</span><span class=\"token plain\">. </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">. 09. 오후 </span><span class=\"token number\" style=\"color:#36acaa\">3</span><span class=\"token plain\">:38:42     LOG </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">InstanceLoader</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> AuthModule dependencies initialized +0ms</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">Nest</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">21927</span><span class=\"token plain\">  - </span><span class=\"token number\" style=\"color:#36acaa\">2021</span><span class=\"token plain\">. </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">. 09. 오후 </span><span class=\"token number\" style=\"color:#36acaa\">3</span><span class=\"token plain\">:38:42     LOG </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">InstanceLoader</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> UsersModule dependencies initialized +1ms</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">Nest</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">21927</span><span class=\"token plain\">  - </span><span class=\"token number\" style=\"color:#36acaa\">2021</span><span class=\"token plain\">. </span><span class=\"token number\" style=\"color:#36acaa\">11</span><span class=\"token plain\">. 09. 오후 </span><span class=\"token number\" style=\"color:#36acaa\">3</span><span class=\"token plain\">:38:42     LOG </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">InstanceLoader</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> AppModule dependencies initialized +0ms</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">/Users/xii/src/main.ts:28</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  app.use</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">cookieParser</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">))</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                      ^</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">TypeError: </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token plain\"> , cookie_parser_1.default</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> is not a </span><span class=\"token keyword\" style=\"color:#00009f\">function</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    at bootstrap </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">/Users/im-uchan/Desktop/~~~~~/src/main.ts:28:23</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    at processTicksAndRejections </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">node:internal/process/task_queues:96:5</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><div class=\"language-typescript codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-typescript codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> cookieParser </span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">'cookie-parser'</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">//...........</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">app</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token function\" style=\"color:#d73a49\">use</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token function\" style=\"color:#d73a49\">cookieParser</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>import때문에 발생한 문제이다.</p><p>tsconfig.json에 들어가 <code>\"esModuleInterop\": true</code>를 추가해주자.</p><div class=\"language-json codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-json codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token property\" style=\"color:#36acaa\">\"compilerOptions\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"module\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"commonjs\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"declaration\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"removeComments\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"emitDecoratorMetadata\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"experimentalDecorators\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"esModuleInterop\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\">// 추가</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"target\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"es2017\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"sourceMap\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"outDir\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"./dist\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"baseUrl\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"./\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"incremental\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"skipLibCheck\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">true</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"strictNullChecks\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">false</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"noImplicitAny\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">false</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"strictBindCallApply\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">false</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">false</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token property\" style=\"color:#36acaa\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">false</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>",
            "url": "https://100milliongold.github.io/blog/post/NestJS-오류-TypeError-0-cookieparser1.default-is-not-a-function",
            "title": "NestJS 오류 TypeError 0 , cookie_parser_1.default is not a function",
            "summary": "아래와 같은 오류를 만났다.",
            "date_modified": "2022-09-29T00:00:00.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "nest",
                "typescript"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/2022/05/02/Lombok을-이용해-Builder-패턴을-만들어보자",
            "content_html": "<p>Builder 패턴이란?\n출처 - Effective Java 규칙 2 - 조슈아 블로그</p><div class=\"codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">생성자에 인자가 많을 때는 빌더 패턴을 고려하라</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>빌더 패턴(Builder pattern) 이란 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다. (출처: 위키백과)</p><p>난 생성자가 많아지면 빌더 패턴을 만드는 편인데, 개발자 성향에 따라 다를수도 있구나를 느꼈다.</p><p>빌더패턴을 활용하면 어떤 필드에 어떤 인자를 넣어줬는지 명확히 알 수 있고, 넣어줄 필요 없는 필드(null)는 굳이 선언할 필요 없으니 좋다고 생각했다. 근데 다른 분은 어떤 필드에 null이 들어간다는걸 명확히 볼 수 있는 점 때문에 생성자를 통해 객체를 생성하시는 방법을 택했다고 하셨다.</p><p>intelliJ는 들어갈 필드의 값을 표시해주는 기능이 있어서 생성자를 통해 객체를 생성해도 어떤 필드를 넣어줘야하는지 보인다. 첫 회사에서는 STS를 썼기 때문에 intelliJ의 다양한 기능적인 혜택을 누리지 못했기도 해서 빌더 패턴이 유용했다.</p><p>코틀린을 사용할 경우에는.... 굳이 빌더 패턴을 쓸 필요가 없을 것 같다 싶었던 이유가 생성자 인자에 필드 명도 함께 표기할 수 있다.</p><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    // 예시</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    fun foo() {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        val member = Member(name = \"zorba\", job = \"developer\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>하지만, java를 쓸 때는 자주 사용하는 디자인 패턴이다.</p><p>빌더 패턴의 장점</p><ol><li><p>객체들마다 들어가야할 인자가 각각 다를 때 유연하게 사용할 수 있다.</p></li><li><p>무조건 setter 생성을 방지하고 불변객체로 만들 수 있다.</p></li><li><p>필수 argument를 지정할 수 있다.(보통의 경우, PK 역할을 할 Id 값이 될 것이다.)</p></li></ol><p>Builder 패턴은 어떻게 작성하나?\n이 페이지를 들어가면 명확하게 빌더 패턴을 어떻게 작성해야하는지 알 수 있다. 빌더 패턴 예제코드</p><p>Java 사용자라면 잘 아는 StringBuilder가 이 빌더 패턴으로 작성된 라이브러리다.</p><p>근데 클래스를 만들 때마다 이 기나긴 코드를 짜기 불편하다!\n그래서 Java 개발자들의 보일러플레이트 코드를 획기적으로 줄여준 라이브러리인 Lombok을 활용해보자.</p><p>바로 @Builder 애노테이션 을 사용하면 예제코드처럼 긴 코드를 작성하지 않아도 된다.</p><p>Builder 패턴을 적용할 클래스</p><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @AllArgsConstructor(access = AccessLevel.PRIVATE)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @Builder(builderMethodName = \"travelCheckListBuilder\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @ToString</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public class TravelCheckList {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private Long id;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String passport;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String flightTicket;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String creditCard;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String internationalDriverLicense;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String travelerInsurance;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        public static TravelCheckListBuilder builder(Long id) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            if(id == null) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                throw new IllegalArgumentException(\"필수 파라미터 누락\");</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            return travelCheckListBuilder().id(id);</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>확인용 클래스</p><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public class MainClass {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        public static void main(String[] args) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            // 빌더패턴을 통해 어떤 필드에 어떤 값을 넣어주는지 명확히 눈으로 확인할 수 있다!</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            TravelCheckList travelCheckList = TravelCheckList.builder(145L)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .passport(\"M12345\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .flightTicket(\"Paris flight ticket\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .creditCard(\"Shinhan card\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .internationalDriverLicense(\"1235-5345\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .travelerInsurance(\"Samsung insurance\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .build();</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            System.out.println(\"빌더 패턴 적용하기 : \" + travelCheckList.toString());</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">       // 결과</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">       // 빌더 패턴 적용하기 : TravelCheckList(id=1, passport=M12345, flightTicket=Paris flight ticket, creditCard=Shinhan card, internationalDriverLicense=1235-5345, travelerInsurance=Samsung insurance)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p><code>@AllArgsConstructor(access = AccessLevel.PRIVATE)</code> : @Builder 애노테이션을 선언하면 전체 인자를 갖는 생성자를 자동으로 만든다. @AllArgsConstructor는 전체 인자를 갖는 생성자를 만드는데, 접근자를 private으로 만들어서 외부에서 접근할 수 없도록 만든다.</p><p><code>@Builder</code> : 위에서 설명했던 Builder 패턴을 자동으로 생성해주는데, builderMethodName에 들어간 이름으로 빌더 메서드를 생성해준다. 나같은 경우, 혼동을 줄이기 위해 클래스 명과 동일하게 놔두고 Builder로 선언했다.</p><p>클래스 내부 builder 메서드 : 필수로 들어가야할 필드들을 검증하기 위해 만들었다. 꼭 id가 아니라도 해당 클래스를 객체로 생성할 때 필수적인 필드가 있다면 활용할 수 있다.</p><p>이렇게 Lombok을 활용하면 반복적으로 길게 짜야하는 코드(보일러 플레이트 코드)를 엄청나게 줄여줄 수 있다.</p><p>빌더 패턴을 사용하면서 무분별한 setter를 남용한다면.... 빌더패턴의 장점을 극대화해서 사용하는 건 아닌 것 같다.</p>",
            "url": "https://100milliongold.github.io/blog/post/2022/05/02/Lombok을-이용해-Builder-패턴을-만들어보자",
            "title": "Lombok을 이용해 Builder 패턴을 만들어보자.",
            "summary": "Builder 패턴이란?",
            "date_modified": "2022-05-02T01:18:58.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/DTO를-이너-클래스로-관리하기",
            "content_html": "<blockquote><p>DTO를 도메인의 이너 클래스로 관리해, DTO 관리 편의성을 높여봅니다.</p></blockquote><hr><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"goal\">Goal<a href=\"#goal\" class=\"hash-link\" aria-label=\"Goal에 대한 직접 링크\" title=\"Goal에 대한 직접 링크\">​</a></h2><ul><li>DTO를 이너클래스로 관리해 개발 편의성을 올려봅니다.</li><li>도메인 클래스안에 DTO를 이너클래스로 두는것이 설계상 괜찮은지에 대해서 고민해봅니다.</li></ul><hr><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"요청별로-dto를-외부-클래스로-나누어-관리하는-경우\">요청별로 DTO를 외부 클래스로 나누어 관리하는 경우<a href=\"#요청별로-dto를-외부-클래스로-나누어-관리하는-경우\" class=\"hash-link\" aria-label=\"요청별로 DTO를 외부 클래스로 나누어 관리하는 경우에 대한 직접 링크\" title=\"요청별로 DTO를 외부 클래스로 나누어 관리하는 경우에 대한 직접 링크\">​</a></h2><blockquote><p>너무 많은 DTO 클래스가 생겨 관리가 힘들어질 수 있습니다.</p></blockquote><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Getter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@NoArgsConstructor(access = AccessLevel.PROTECTED)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Entity</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">public class Member {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @Id</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private Long id;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private String name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public Member(final String name) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        this.name = name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><ul><li>만약 <strong>Member</strong>라는 도메인 클래스가 있다고 해봅시다.</li></ul><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Getter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@AllArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@NoArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">public class MemberCreateRequest {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private String name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Getter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@AllArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">public class MemberCreateResponse {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private Long id;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private String name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><ul><li>이때 Member를 create하는 기능이 필요할시, <code>MemberCreateRequest</code>, <code>MemberCreateResponse</code> 벌써 두개의 DTO 클래스가 필요해집니다.</li><li>지금은 단순히 2개이지만, 여러 DTO가 계속 필요해지는 상황이 온다면 <code>MemberxxxRequest</code> 이런 DTO 클래스가 점점 늘어나게 되어 DTO를 선별하고 구분하는데 인적 리소스가 소모되게 될것입니다.</li></ul><p><img loading=\"lazy\" src=\"/blog/assets/images/image-dd39baadac68ed47c9996c88b56c35fa.png\" width=\"412\" height=\"916\" class=\"img_ev3q\"></p><blockquote><p>과거 진행한 프로젝트의 수많은 DTO 클래스들...</p></blockquote><hr><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"dto를-이너-클래스로-관리\">DTO를 이너 클래스로 관리<a href=\"#dto를-이너-클래스로-관리\" class=\"hash-link\" aria-label=\"DTO를 이너 클래스로 관리에 대한 직접 링크\" title=\"DTO를 이너 클래스로 관리에 대한 직접 링크\">​</a></h2><blockquote><p>DTO를 관리하는 (인적)비용이 줄어듭니다.  </p></blockquote><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Getter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@NoArgsConstructor(access = AccessLevel.PROTECTED)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Entity</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">public class Member {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @Id</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private Long id;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    private String name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public Member(final String name) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        this.name = name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @Getter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @AllArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @NoArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public static class Request {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @Getter</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @AllArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public static class Response {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private Long id;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String name;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><ul><li>위처럼 이너 클래스를 이용해, Member안에 Request와 Response DTO를 가지게 있게 한다면 어떻게 될까요.</li><li>Member 클래스만 보고 관련된 DTO를 빠르게 찾을 수 있게되어, 인적 리소스가 줄어들고 개발의 편의성이 늘어나게 됩니다.</li></ul><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@RestController</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@RequestMapping(\"/api/member\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">public class MemberController {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @GetMapping(\"/{id}\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public ResponseEntity&lt;Member.Response&gt; getMember(@PathVariable final Long id) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        return ResponseEntity.ok(new Member.Response(id, \"unluckyjung\"));</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @PostMapping</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public ResponseEntity&lt;Member.Response&gt; create(@RequestBody final Member.Request request) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        //...저장 로직</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        return ResponseEntity.created(URI.create(String.format(\"/api/member/%d\", 1L)))</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                .body(new Member.Response(1L, request.getName()));</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><ul><li>이너클래스를 요청, 응답을 처리하는 컨트롤러 예제를 간단하게 작성하면, 위와 같이 구현할 수 있게 됩니다.</li><li>(위 예제가 실제 개발에서 적용되는 방식은 아닙니다. 단순히 이해를 쉽기 위해서 작성한 예제일 뿐입니다.)</li></ul><hr><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"고민되는-사항\">고민되는 사항<a href=\"#고민되는-사항\" class=\"hash-link\" aria-label=\"고민되는 사항에 대한 직접 링크\" title=\"고민되는 사항에 대한 직접 링크\">​</a></h2><blockquote><p>도메인이 DTO의 형태를 알고 있게 되는건 아닐까? 둘의 결합도가 높아지는건 아닐까?   </p></blockquote><ul><li>DTO를 도메인 객체와 분리해서 사용하는 이유는, <strong>DTO는 변경이 찾지만 도메인 객체는 그렇지 않습니다.</strong> 따라서 도메인을 DTO로 사용하는것은 변경이 잦은 형태에 의존성을 띠고 있는 형태가 되어, 올바르지 못한 설계가 되기때문에 도메인과 DTO 두개를 분리하는것 입니다.</li><li>하지만, 위와같이 도메인(엄밀하게 따지면 엔티티이지만, 도메인으로 하겠습니다.) 객체가 DTO를 이너클래스로 가지고 있는 형태는 <strong>도메인이 DTO를 알고 있는 형태가 되어, 잘못된 설계가 아닌가?</strong> 라는 생각이 순간들었습니다.</li></ul><blockquote><p><strong>결론적으로는 위의 예시와같은 형태는 괜찮다라고 생각합니다.</strong>  </p></blockquote><ul><li>의존성을 띠고 있는 형태라 함은 Domain <strong>객체의 로직에 DTO가 영향</strong>을 주게 되는것을 뜻하는것이라고 생각합니다.</li><li>하지만 위와 같은 이너클래스 형태는 단순히 도메인 클래스안에 DTO 클래스를 들고만 있지, DTO 와 <strong>도메인의 로직에는 전혀 영향이 없는 형태</strong>입니다. 즉 로직이나 상태에 따른 의존성이 있는 형태는 아닌거죠.</li><li><code>도메인 &lt;-&gt; DTO</code> 끼리 연관이 생긴다는것보다는, 해당 도메인과 관련된 DTO를 같이 묶어두기 위한 정도인거죠.</li><li>즉, 편의성을 위해서 도메인내에 이너 클래스를 묶어서 사용하는것이기 때문에 다른 시야로 봐야한다고 결론 내렸습니다.</li><li><strong>물론 여러 도메인들이 합쳐져서 만들어지는 DTO 라면, 한 도메인의 이너클래스로 DTO를 사용하면 안되겠죠.</strong></li></ul><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"장점\">장점<a href=\"#장점\" class=\"hash-link\" aria-label=\"장점에 대한 직접 링크\" title=\"장점에 대한 직접 링크\">​</a></h3><blockquote><p>응집도가 높아지는 효과가 있습니다.  </p></blockquote><ul><li>위에서 말한 <strong>여러 도메인들이 합쳐져서 만들어지는 DTO 는 이너클래스로 사용하지 않는다.</strong> 라는 룰을 지킨다면</li><li>개발자 입장에서 이너클래스의 DTO를 보았을때 이너 클래스 DTO는 해당 클래스 안에서만 한정적으로 사용한다는 의미를 부여할 수 있어, 응집력이 높아지고 개발자들이 신경써야 하는 외부클래스의 개수가 줄어들어 개발 편의성을 높이는 효과를 나타낼 수 있다고 생각합니다.</li></ul><hr><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"conclusion\">Conclusion<a href=\"#conclusion\" class=\"hash-link\" aria-label=\"Conclusion에 대한 직접 링크\" title=\"Conclusion에 대한 직접 링크\">​</a></h2><ul><li>이너클래스를 이용해 DTO 관리의 편의성을 높일 수 있다.</li><li>하지만 이너클래스로 만들어진 DTO는, 속해 있는 도메인 클래스로만 구성되는 경우에 사용해야한다.</li></ul><hr><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"reference\">Reference<a href=\"#reference\" class=\"hash-link\" aria-label=\"Reference에 대한 직접 링크\" title=\"Reference에 대한 직접 링크\">​</a></h2><ul><li><a href=\"https://www.inflearn.com/questions/47205\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.inflearn.com/questions/47205</a></li><li><a href=\"https://velog.io/@ausg/Spring-Boot%EC%97%90%EC%84%9C-%EA%B9%94%EB%81%94%ED%95%98%EA%B2%8C-DTO-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\" target=\"_blank\" rel=\"noopener noreferrer\">https://velog.io/@ausg/Spring-Boot%EC%97%90%EC%84%9C-%EA%B9%94%EB%81%94%ED%95%98%EA%B2%8C-DTO-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0</a></li></ul><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"출처\">출처<a href=\"#출처\" class=\"hash-link\" aria-label=\"출처에 대한 직접 링크\" title=\"출처에 대한 직접 링크\">​</a></h2><p><a href=\"https://unluckyjung.github.io/dev/2022/02/20/Dto-InnerClass/\" target=\"_blank\" rel=\"noopener noreferrer\">DTO를 inner class로 관리하기\n(https://unluckyjung.github.io/dev/2022/02/20/Dto-InnerClass/)</a></p>",
            "url": "https://100milliongold.github.io/blog/post/DTO를-이너-클래스로-관리하기",
            "title": "DTO를 이너 클래스로 관리하기",
            "summary": "DTO를 도메인의 이너 클래스로 관리해, DTO 관리 편의성을 높여봅니다.",
            "date_modified": "2022-05-02T00:00:00.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/Lombok을-이용해-Builder-패턴을-만들어보자",
            "content_html": "<p>Builder 패턴이란?\nEffective Java 규칙 2 - 조슈아 블로그</p><div class=\"codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-text codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">생성자에 인자가 많을 때는 빌더 패턴을 고려하라</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>빌더 패턴(Builder pattern) 이란 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다. (출처: 위키백과)</p><p>난 생성자가 많아지면 빌더 패턴을 만드는 편인데, 개발자 성향에 따라 다를수도 있구나를 느꼈다.</p><p>빌더패턴을 활용하면 어떤 필드에 어떤 인자를 넣어줬는지 명확히 알 수 있고, 넣어줄 필요 없는 필드(null)는 굳이 선언할 필요 없으니 좋다고 생각했다. 근데 다른 분은 어떤 필드에 null이 들어간다는걸 명확히 볼 수 있는 점 때문에 생성자를 통해 객체를 생성하시는 방법을 택했다고 하셨다.</p><p>intelliJ는 들어갈 필드의 값을 표시해주는 기능이 있어서 생성자를 통해 객체를 생성해도 어떤 필드를 넣어줘야하는지 보인다. 첫 회사에서는 STS를 썼기 때문에 intelliJ의 다양한 기능적인 혜택을 누리지 못했기도 해서 빌더 패턴이 유용했다.</p><p>코틀린을 사용할 경우에는.... 굳이 빌더 패턴을 쓸 필요가 없을 것 같다 싶었던 이유가 생성자 인자에 필드 명도 함께 표기할 수 있다.</p><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    // 예시</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    fun foo() {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        val member = Member(name = \"zorba\", job = \"developer\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>하지만, java를 쓸 때는 자주 사용하는 디자인 패턴이다.</p><p>빌더 패턴의 장점</p><ol><li>객체들마다 들어가야할 인자가 각각 다를 때 유연하게 사용할 수 있다.</li></ol><ol start=\"2\"><li>무조건 setter 생성을 방지하고 불변객체로 만들 수 있다.</li></ol><ol start=\"3\"><li>필수 argument를 지정할 수 있다.(보통의 경우, PK 역할을 할 Id 값이 될 것이다.)</li></ol><p>Builder 패턴은 어떻게 작성하나?\n이 페이지를 들어가면 명확하게 빌더 패턴을 어떻게 작성해야하는지 알 수 있다. 빌더 패턴 예제코드</p><p>Java 사용자라면 잘 아는 StringBuilder가 이 빌더 패턴으로 작성된 라이브러리다.</p><p>근데 클래스를 만들 때마다 이 기나긴 코드를 짜기 불편하다!\n그래서 Java 개발자들의 보일러플레이트 코드를 획기적으로 줄여준 라이브러리인 Lombok을 활용해보자.</p><p>바로 @Builder 애노테이션 을 사용하면 예제코드처럼 긴 코드를 작성하지 않아도 된다.</p><p>Builder 패턴을 적용할 클래스</p><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @AllArgsConstructor(access = AccessLevel.PRIVATE)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @Builder(builderMethodName = \"travelCheckListBuilder\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    @ToString</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public class TravelCheckList {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private Long id;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String passport;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String flightTicket;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String creditCard;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String internationalDriverLicense;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        private String travelerInsurance;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        public static TravelCheckListBuilder builder(Long id) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            if(id == null) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                throw new IllegalArgumentException(\"필수 파라미터 누락\");</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            return travelCheckListBuilder().id(id);</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>확인용 클래스</p><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    public class MainClass {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        public static void main(String[] args) {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            // 빌더패턴을 통해 어떤 필드에 어떤 값을 넣어주는지 명확히 눈으로 확인할 수 있다!</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            TravelCheckList travelCheckList = TravelCheckList.builder(145L)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .passport(\"M12345\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .flightTicket(\"Paris flight ticket\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .creditCard(\"Shinhan card\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .internationalDriverLicense(\"1235-5345\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .travelerInsurance(\"Samsung insurance\")</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                    .build();</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            System.out.println(\"빌더 패턴 적용하기 : \" + travelCheckList.toString());</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        }</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">       // 결과</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">       // 빌더 패턴 적용하기 : TravelCheckList(id=1, passport=M12345, flightTicket=Paris flight ticket, creditCard=Shinhan card, internationalDriverLicense=1235-5345, travelerInsurance=Samsung insurance)</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    }</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p><code>@AllArgsConstructor(access = AccessLevel.PRIVATE)</code> : @Builder 애노테이션을 선언하면 전체 인자를 갖는 생성자를 자동으로 만든다. @AllArgsConstructor는 전체 인자를 갖는 생성자를 만드는데, 접근자를 private으로 만들어서 외부에서 접근할 수 없도록 만든다.</p><p><code>@Builder</code> : 위에서 설명했던 Builder 패턴을 자동으로 생성해주는데, builderMethodName에 들어간 이름으로 빌더 메서드를 생성해준다. 나같은 경우, 혼동을 줄이기 위해 클래스 명과 동일하게 놔두고 Builder로 선언했다.</p><p>클래스 내부 builder 메서드 : 필수로 들어가야할 필드들을 검증하기 위해 만들었다. 꼭 id가 아니라도 해당 클래스를 객체로 생성할 때 필수적인 필드가 있다면 활용할 수 있다.</p><p>이렇게 Lombok을 활용하면 반복적으로 길게 짜야하는 코드(보일러 플레이트 코드)를 엄청나게 줄여줄 수 있다.</p><p>빌더 패턴을 사용하면서 무분별한 setter를 남용한다면.... 빌더패턴의 장점을 극대화해서 사용하는 건 아닌 것 같다.</p>",
            "url": "https://100milliongold.github.io/blog/post/Lombok을-이용해-Builder-패턴을-만들어보자",
            "title": "Lombok을 이용해 Builder 패턴을 만들어보자.",
            "summary": "Builder 패턴이란?",
            "date_modified": "2022-05-02T00:00:00.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "java"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/2022/04/04/RequiredArgsConstructor",
            "content_html": "<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"requiredargsconstructor\"><strong><em>@RequiredArgsConstructor</em></strong><a href=\"#requiredargsconstructor\" class=\"hash-link\" aria-label=\"requiredargsconstructor에 대한 직접 링크\" title=\"requiredargsconstructor에 대한 직접 링크\">​</a></h2><p>이 어노테이션은 초기화 되지않은 <code>final</code> 필드나, <code>@NonNull</code> 이 붙은 필드에 대해 생성자를 생성해 줍니다. 주로 의존성 주입(Dependency Injection) 편의성을 위해서 사용되곤 합니다.</p><p>스프링 의존성 주입의 특징 중 한가지를 이용하는데 다음과 같습니다.</p><blockquote><p>어떠한 빈(Bean)에 생성자가 오직 하나만 있고, 생성자의 파라미터 타입이 빈으로 등록 가능한 존재라면 이 빈은 @Autowired 어노테이션 없이도 의존성 주입이 가능하다.</p></blockquote><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"example\">Example<a href=\"#example\" class=\"hash-link\" aria-label=\"Example에 대한 직접 링크\" title=\"Example에 대한 직접 링크\">​</a></h3><div class=\"language-java codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-java codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@Service</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">@RequiredArgsConstructor</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">public class RequiredArgsConstructorDIServiceExample {</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  private final FirstRepository firstRepository;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  private final SecondRepository secondRepository;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  private final ThirdRepository thirdRepository;</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  // ...</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div><p>클래스 파일을 보면 <code>@ConstructorProperties</code> 어노테이션과 함께 <code>final</code> 필드를 매개변수로 하는 생성자가 생성되었습니다. 매개변수로 있는 3개의 리포지토리(repository)는 빈으로 등록이 가능한 존재이므로, <code>@Autowired</code> 어노테이션 없이 의존성 주입이 이루어지게 되는 것입니다.</p><h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"결론\">결론<a href=\"#결론\" class=\"hash-link\" aria-label=\"결론에 대한 직접 링크\" title=\"결론에 대한 직접 링크\">​</a></h3><p><code>@RequiredArgsConstructor</code> 을 이용해서 편리하게 의존성 주입하는 방법을 배워봤습니다. 추가적으로 롬복 어노테이션이(@Getter 혹은 @Setter 등) 사용할땐 편하지만, 단점도 있습니다. setter 메서드가 필요없는 필드에 대해서도 setter 메서드를 강제로 생성하게 되니, 필드 값이 변경될 위험이 생기게 됩니다. 이런 부분들은 전부 리팩토링의 대상이지만, 롬복을 사용하게될 경우 리팩토링이 힘들어지는 부분도 있으니 너무 무분별하게 사용하는것은 좋지 않다고 생각합니다.</p><p>출처 : <a href=\"https://medium.com/webeveloper/requiredargsconstructor-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-dependency-injection-4f1b0ac33561\" target=\"_blank\" rel=\"noopener noreferrer\">@RequiredArgsConstructor 를 이용한 의존성 주입(Dependency Injection)\n</a></p>",
            "url": "https://100milliongold.github.io/blog/post/2022/04/04/RequiredArgsConstructor",
            "title": "@RequiredArgsConstructor",
            "summary": "_@RequiredArgsConstructor_",
            "date_modified": "2022-04-25T01:18:58.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "kubernetes"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/2022/04/25/Ingress-와-egress-차이",
            "content_html": "<p>일반적으로, 네트워크 트래픽은 Ingress와 egress 으로 구분된다. Ingress는 외부로부터 서버 내부로 유입되는 네트워크 트래픽을, egress는 서버 내부에서 외부로 나가는 트래픽을 의미한다</p>",
            "url": "https://100milliongold.github.io/blog/post/2022/04/25/Ingress-와-egress-차이",
            "title": "Ingress 와 egress 차이",
            "summary": "일반적으로, 네트워크 트래픽은 Ingress와 egress 으로 구분된다. Ingress는 외부로부터 서버 내부로 유입되는 네트워크 트래픽을, egress는 서버 내부에서 외부로 나가는 트래픽을 의미한다",
            "date_modified": "2022-04-25T01:18:58.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "kubernetes"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/2022/04/25/networkpolicy-생성",
            "content_html": "<div class=\"language-yaml codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-yaml codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token key atrule\" style=\"color:#00a4db\">apiVersion</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> networking.k8s.io/v1</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token key atrule\" style=\"color:#00a4db\">kind</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> NetworkPolicy</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token key atrule\" style=\"color:#00a4db\">metadata</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> internal</span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\">policy</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">namespace</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> default</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token key atrule\" style=\"color:#00a4db\">spec</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">podSelector</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">matchLabels</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> internal</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">policyTypes</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> Egress</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> Ingress</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">ingress</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">egress</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">to</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">podSelector</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token key atrule\" style=\"color:#00a4db\">matchLabels</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              </span><span class=\"token key atrule\" style=\"color:#00a4db\">name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> mysql</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">ports</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">protocol</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> TCP</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token key atrule\" style=\"color:#00a4db\">port</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">3306</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">to</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">podSelector</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token key atrule\" style=\"color:#00a4db\">matchLabels</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              </span><span class=\"token key atrule\" style=\"color:#00a4db\">name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> payroll</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">ports</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">protocol</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> TCP</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token key atrule\" style=\"color:#00a4db\">port</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">8080</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">ports</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">port</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">53</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token key atrule\" style=\"color:#00a4db\">protocol</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> UDP</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token key atrule\" style=\"color:#00a4db\">port</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">53</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token key atrule\" style=\"color:#00a4db\">protocol</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> TCP</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>",
            "url": "https://100milliongold.github.io/blog/post/2022/04/25/networkpolicy-생성",
            "title": "networkpolicy 생성",
            "date_modified": "2022-04-25T01:18:58.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "kubernetes"
            ]
        },
        {
            "id": "https://100milliongold.github.io/blog/post/Udemy-사이트-강좌-자막-번역-방법",
            "content_html": "<p>다른 강좌 사이트인 인XX , 패스트XXX 비해 Udemy은 저렴하고 많은 강좌가 있지만 대부분 영어 밖에 없어서 힘들었는데 자막을 번역해서 싸고 질좋은 강좌들을 들어보자 !!!</p><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"1-플레이어-설정\">1. 플레이어 설정<a href=\"#1-플레이어-설정\" class=\"hash-link\" aria-label=\"1. 플레이어 설정에 대한 직접 링크\" title=\"1. 플레이어 설정에 대한 직접 링크\">​</a></h2><ol><li>Udemy 플레이어 부분에 CC 버튼을 클릭후 자막 설정 클릭\n<img loading=\"lazy\" src=\"/blog/assets/images/images_gadian88_post_1afb2713-e425-406c-b844-39da3373aac2_image-8c1d584d059b74f7f50f07f09b08dd60.png\" width=\"430\" height=\"496\" class=\"img_ev3q\"></li><li>자막 설정에서 <code>동영살 아래에 표시</code> 토글 활성화\n<img loading=\"lazy\" src=\"/blog/assets/images/images_gadian88_post_4a9f5063-737c-434d-8068-e8a79f912d51_image-221ec4bf9c541561b483be7defcf6832.png\" width=\"454\" height=\"315\" class=\"img_ev3q\"></li><li>대본 활성화\n<img loading=\"lazy\" src=\"/blog/assets/images/images_gadian88_post_aa7b210d-3961-443a-b415-3133bce5c649_image-a94063d1b5743d7ac31429f0a9d7904c.png\" width=\"998\" height=\"489\" class=\"img_ev3q\"></li></ol><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"2-스크립트-입력\">2. 스크립트 입력<a href=\"#2-스크립트-입력\" class=\"hash-link\" aria-label=\"2. 스크립트 입력에 대한 직접 링크\" title=\"2. 스크립트 입력에 대한 직접 링크\">​</a></h2><ol><li><p><code>F12</code> 키를 입력 후에 콘솔창에서 다음과 같은 스크립트를 입력</p><div class=\"language-javascript codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-javascript codeBlock_bY9V thin-scrollbar\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword control-flow\" style=\"color:#00009f\">if</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token keyword\" style=\"color:#00009f\">void</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">!==</span><span class=\"token plain\"> </span><span class=\"token dom variable\" style=\"color:#36acaa\">window</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token property-access\">is</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">clearInterval</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token dom variable\" style=\"color:#36acaa\">window</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token property-access\">is</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword control-flow\" style=\"color:#00009f\">else</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#00009f\">let</span><span class=\"token plain\"> e </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"\"</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#00009f\">function</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">check</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">let</span><span class=\"token plain\"> t </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">$</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\".well--container--2edq4 span\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      n </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">$</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">'p[data-purpose=\"transcript-cue-active\"] span font font'</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      i </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> n</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token method function property-access\" style=\"color:#d73a49\">html</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    e </span><span class=\"token operator\" style=\"color:#393A34\">!==</span><span class=\"token plain\"> i </span><span class=\"token operator\" style=\"color:#393A34\">&amp;&amp;</span><span class=\"token plain\"> t</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token method function property-access\" style=\"color:#d73a49\">html</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">i</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">e </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> n</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token method function property-access\" style=\"color:#d73a49\">html</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token dom variable\" style=\"color:#36acaa\">window</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token property-access\">is</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">setInterval</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">check</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">200</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">;</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"클립보드에 코드 복사\" title=\"복사\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg class=\"copyButtonIcon_y97N\" viewBox=\"0 0 24 24\"><path d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg class=\"copyButtonSuccessIcon_LjdS\" viewBox=\"0 0 24 24\"><path d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div></li></ol><h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"3-번역\">3. 번역<a href=\"#3-번역\" class=\"hash-link\" aria-label=\"3. 번역에 대한 직접 링크\" title=\"3. 번역에 대한 직접 링크\">​</a></h2><ol><li>마우스 우클릭후에 헌국어(으)로 번역 클릭\n<img loading=\"lazy\" src=\"/blog/assets/images/images_gadian88_post_dbe61129-6e6f-482e-a7ba-772309e40829_image-6f8943a91547154fa10a78eea5269304.png\" width=\"918\" height=\"653\" class=\"img_ev3q\"></li></ol><p>즐공</p>",
            "url": "https://100milliongold.github.io/blog/post/Udemy-사이트-강좌-자막-번역-방법",
            "title": "Udemy 사이트 강좌 자막 번역 방법",
            "summary": "다른 강좌 사이트인 인XX , 패스트XXX 비해 Udemy은 저렴하고 많은 강좌가 있지만 대부분 영어 밖에 없어서 힘들었는데 자막을 번역해서 싸고 질좋은 강좌들을 들어보자 !!!",
            "date_modified": "2022-02-25T00:00:00.000Z",
            "author": {
                "name": "100milliongold",
                "url": "https://sebastienlorber.com"
            },
            "tags": [
                "udemy",
                "강좌",
                "유데미"
            ]
        }
    ]
}