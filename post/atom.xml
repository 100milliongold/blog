<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://100milliongold.github.io/blog/post</id>
    <title>My Blog Blog</title>
    <updated>2023-02-14T12:52:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://100milliongold.github.io/blog/post"/>
    <subtitle>My Blog Blog</subtitle>
    <icon>https://100milliongold.github.io/blog/img/favicon.ico</icon>
    <rights>Copyright © 2023 Facebook, Inc.</rights>
    <entry>
        <title type="html"><![CDATA[DataBase 개요 2]]></title>
        <id>https://100milliongold.github.io/blog/post/2023/02/14/DB개요2</id>
        <link href="https://100milliongold.github.io/blog/post/2023/02/14/DB개요2"/>
        <updated>2023-02-14T12:52:00.000Z</updated>
        <summary type="html"><![CDATA[데이터 베이스 3단계 아키텍쳐 ANSI/SPARC 모델]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터-베이스-3단계-아키텍쳐-ansisparc-모델">데이터 베이스 3단계 아키텍쳐 ANSI/SPARC 모델<a href="#데이터-베이스-3단계-아키텍쳐-ansisparc-모델" class="hash-link" aria-label="데이터 베이스 3단계 아키텍쳐 ANSI/SPARC 모델에 대한 직접 링크" title="데이터 베이스 3단계 아키텍쳐 ANSI/SPARC 모델에 대한 직접 링크">​</a></h2><ul><li>ANSI/SPARC (American National Standards Institute / System Planning And Requirements Commitree) 모델</li><li>사용자 관점, 통합 모델 관점, 저장장치의 세가지 관점에서 Architecture 정의 및 이들 간에 상호 연관관계를 정의함</li><li>미국 표준협회(ANSI) 산하의 X3 위원회 (컴퓨터 및 정보처리)의 특별 연구분과 위원회에서 DBMS 와 그 인터페이스를 위해 제안한 Three-Schema Architeture (1978년)</li></ul><table><thead><tr><th>단계</th><th>설명</th><th>비고</th></tr></thead><tbody><tr><td>외부 스키마</td><td>- 사용자나 응용 프로그래머가 접근한수 있는 데이터베이를 정의 <br> - 전체 데이터베이스의 한 논리적인 부분으로 볼수 있으므로 서브 스키마라고 함</td><td>View</td></tr><tr><td>개념 스키마</td><td>- 범 기관적 입장에서 본 데이터베이스의 정의를 기술<br> - 모든응용에 대한 전체적으로 통합된 데이터 구조로서 단순히 스키마라고 함 <br> (스키마라고 하면 일반적으로 개념스키마를 의미함) <br> - 접근권한, 보안정채그 무결성 규칙을 명세</td><td>통합 ERD</td></tr><tr><td>내부 스키마</td><td>- 물리적 저장 장치의 관점에서 본 전체 데이터베이스의 명세의미 <br> - 개념스키마의 물리적 저장구조에 대한 정의를 기술</td><td>물리DB</td></tr></tbody></table><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ansisparc-아키텍쳐-스키마와-인스턴스">ANSI/SPARC 아키텍쳐 스키마와 인스턴스<a href="#ansisparc-아키텍쳐-스키마와-인스턴스" class="hash-link" aria-label="ANSI/SPARC 아키텍쳐 스키마와 인스턴스에 대한 직접 링크" title="ANSI/SPARC 아키텍쳐 스키마와 인스턴스에 대한 직접 링크">​</a></h2><table><thead><tr><th>구분</th><th>스키마</th><th>인스턴스</th></tr></thead><tbody><tr><td>정의</td><td>- 데이터베이스에 저장되는 데이터 구조및 유형을 정의한것<br> - 데이터베이스의 전체적인 정의를 나타내며 일반적으로 개념(논리) 스키마를 지정함</td><td>- 데이터베이스에 실제 저장되어 있는 값들을 나타냄</td></tr><tr><td>특징</td><td>- 한번 정의되면 잘 변경되지 않음</td><td>- 계속적으로 변화하는 데이터베이스 특성으로 인래 자주 변경됨</td></tr><tr><td>언어</td><td>- DDL(Data Definition Language)</td><td>- DML(Data Multiplation Language)</td></tr><tr><td>사례</td><td><img loading="lazy" src="/blog/assets/images/data1-66057642e501e441f744ae11eabb57e5.jpeg" width="622" height="213" class="img_ev3q"></td><td><img loading="lazy" src="/blog/assets/images/data2-79ba3a45a2d17368cbfb2d9b2b8b1d2b.png" width="204" height="167" class="img_ev3q"></td></tr></tbody></table><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3단계-student-데이터베이스-예">3단계 Student 데이터베이스 예<a href="#3단계-student-데이터베이스-예" class="hash-link" aria-label="3단계 Student 데이터베이스 예에 대한 직접 링크" title="3단계 Student 데이터베이스 예에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="/blog/assets/images/data3-6650cee03ae6a0e5331cd36ba18696a1.png" width="602" height="338" class="img_ev3q"></p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터-독립성">데이터 독립성<a href="#데이터-독립성" class="hash-link" aria-label="데이터 독립성에 대한 직접 링크" title="데이터 독립성에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="데이터-독립성의-정의">데이터 독립성의 정의<a href="#데이터-독립성의-정의" class="hash-link" aria-label="데이터 독립성의 정의에 대한 직접 링크" title="데이터 독립성의 정의에 대한 직접 링크">​</a></h3><ul><li>상위 단계의 스키마 정의에 영향을 주지 않으면서 어떤 단계의 스키마를 변경할수 있는것</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="데이터-독립성의-목적">데이터 독립성의 목적<a href="#데이터-독립성의-목적" class="hash-link" aria-label="데이터 독립성의 목적에 대한 직접 링크" title="데이터 독립성의 목적에 대한 직접 링크">​</a></h3><ul><li>DB 에 대한 사용자의 View 와 DB 가 실제 표현되는 View를 분리하여 <strong><em>변경 간섭 최소화</em></strong></li><li>각 View 의 독립성 유지, <strong><em>계층별 View 에 영향을 주지 않고 변경</em></strong>이 가능</li></ul><table><thead><tr><th>구분</th><th>내용</th></tr></thead><tbody><tr><td><strong><em>논리적 독립성</em></strong></td><td>- <strong><em>외부 스키마나 응용 프로그램을 변경하지 않으면서 개념 스키마를 변경</em></strong>할수 있는 능력(성질)<br> - 개념 스키마 구조의 변경이나 속성의 삭제 등도 이것을 실제로 이용하지 않는 외부 스키마는 영향을 주지않음</td></tr><tr><td><strong><em>물리적 독립성</em></strong></td><td>- <strong><em>개념 스키마를 변경하지 않으면서 내부 스키마를 변경</em></strong>할수 있는 능력(성질) <br> - 개념 스키마가 디스크 내의 내부 필드와 어떻게 대응하는가를 정의<br> - 다른 디스크로의 데이터 이동이나 파일 구조의 변경과 같은 물리적인 변경 필요시 내부스키마를 변경해주면 개념스키마에 영향을 주지 않음</td></tr></tbody></table><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3단계-스키마-간의-사상">3단계 스키마 간의 사상<a href="#3단계-스키마-간의-사상" class="hash-link" aria-label="3단계 스키마 간의 사상에 대한 직접 링크" title="3단계 스키마 간의 사상에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="/blog/assets/images/data4-430e711f3d47be238d2aeebacf6a4ad1.jpeg" width="727" height="894" class="img_ev3q"></p>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="database" term="database"/>
        <category label="정보관리" term="정보관리"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[DataBase 개요 1]]></title>
        <id>https://100milliongold.github.io/blog/post/2023/02/14/DB개요1</id>
        <link href="https://100milliongold.github.io/blog/post/2023/02/14/DB개요1"/>
        <updated>2023-02-14T12:07:00.000Z</updated>
        <summary type="html"><![CDATA[데이터 / 정보 / 지식 / 지혜]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터--정보--지식--지혜">데이터 / 정보 / 지식 / 지혜<a href="#데이터--정보--지식--지혜" class="hash-link" aria-label="데이터 / 정보 / 지식 / 지혜에 대한 직접 링크" title="데이터 / 정보 / 지식 / 지혜에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="/blog/assets/images/DIKW_피라미드-929229e3d0d74b2e4753c10a0b9a5063.jpeg" width="434" height="661" class="img_ev3q"></p><table><thead><tr><th>구분</th><th>특징</th><th>비교</th><th>관련 시스템</th></tr></thead><tbody><tr><td>Data</td><td>- 그자체로는 의미를 갖지않고 존재하는것 <br> - 식별 및 기록이 가능한 단순한 사실</td><td>- 영수증 내 기록데이터</td><td>데이터베이스, OLTP, CDC, ETL, 데이터 레이크</td></tr><tr><td>Information</td><td>- 관계에 따라 의미가 부여된 Data <br> - 의미있게 구조화된 Data 의 집합</td><td>- 어제매출 : 70만원 <br> - 오늘매출 : 40만원 <br> -&gt; 평균 60만원</td><td>데이터 웨어하우스, OLAP</td></tr><tr><td>Knowledge</td><td>- 의사 결정에 이용되는 정보 <br> - 부가 가치 창출 <br> - 정보의 추상화 , 일반화</td><td>- 매출증가의 원인분석 눈이 오면 가까운 곳에서 시켜먹으려는 경향</td><td>지식 관리 시스템(KMS), 전사적 지식 포탈(EKP)</td></tr><tr><td>Wisdom</td><td>- 올바른 결정이나 판단을 위한 지식과 경험이 축적된 상태 / 능력</td><td>- 창의적인 아이디어 응용 (눈예보시 배달 10% 할인 판촉행사 -&gt; 매출 100만원 증가)</td><td>비즈니스 인텔리전스(BI)</td></tr></tbody></table><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터-베이스의-정의">데이터 베이스의 정의<a href="#데이터-베이스의-정의" class="hash-link" aria-label="데이터 베이스의 정의에 대한 직접 링크" title="데이터 베이스의 정의에 대한 직접 링크">​</a></h2><p>한 조직의 여러 응용 시스템이 <strong><em>공용</em></strong> 하기 위해 최소의 중복으로 <strong><em>통합</em></strong>, <strong><em>저장</em></strong>된 <strong><em>운영</em></strong>된 데이터의 집합</p><ul><li>통합 데이터 : 최소의 중복 / 통제된 중복</li><li>저장 데이터 : 컴퓨터가 접근 가능한 매체에 저장</li><li>운영 데이터 : 조직의 운영에 꼭 필요한 필수적인 데이터베이스</li><li>공유 데이터 : 여러 응용 프로그램이 공통으로 허용</li></ul><p>하나 이상의 서로 관련이 되는 조직체들의 활동을 기술하는 데이터 들의 모임</p><table><thead><tr><th>특징</th><th>내용</th></tr></thead><tbody><tr><td>실시간 접근</td><td>저장되는 데이터는 실시간 접근성이 보장된</td></tr><tr><td>계속적인 변화</td><td>갱신 삽입 삭제등의 연산에 의해 내용이 동적으로 변경됨</td></tr><tr><td>동시 공유</td><td>저장된 데이터는 자수의 사용자에 의해 동시에 공유할수 있음</td></tr><tr><td>내용에 의한 참조</td><td>사용자는 참조하기를 원하는 데이터의 내용을 이용하여 데이터의 저장 위차나 수에 상관없이 데이터에 논리적으로 접근할수 있음</td></tr></tbody></table><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터베이스-시스템의-정의">데이터베이스 시스템의 정의<a href="#데이터베이스-시스템의-정의" class="hash-link" aria-label="데이터베이스 시스템의 정의에 대한 직접 링크" title="데이터베이스 시스템의 정의에 대한 직접 링크">​</a></h2><ul><li>데이터를 저장 유지 관리하여 정보를 생성하는 시스템</li><li>데이터베이스를 포함하여 이를 구축, 관리하고 사용하기 위한 총체적인 시스템</li></ul><p><img loading="lazy" src="/blog/assets/images/dbsystem-612e5cfc1c347b0690181ead9ec9b581.png" width="1023" height="696" class="img_ev3q"></p><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="데이터베이스-시스템의-기본-구조">데이터베이스 시스템의 기본 구조<a href="#데이터베이스-시스템의-기본-구조" class="hash-link" aria-label="데이터베이스 시스템의 기본 구조에 대한 직접 링크" title="데이터베이스 시스템의 기본 구조에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="/blog/assets/images/관점-68fcd3eaf432fde463f8d612d110ade0.jpeg" width="600" height="432" class="img_ev3q"></p><table><thead><tr><th>단계</th><th>설명</th></tr></thead><tbody><tr><td>외부단계</td><td>- 사용자에서 데이터를 바라보는 관점을 모델링한것 <br> - 여러개의 외부 스키마를 가질수 있음 <br> ex)자동차에 대한 사용자의 관점 : 이동수단(운전자), 수리대상(정비사)</td></tr><tr><td>개념단계</td><td>- DB 관리자가 데이터를 바라보는 관점을 모델링한것 <br> - 데이터베이스의 구조와 데이터간의 관계를 논리적으로 표현<br> - 데이터 베이스 관리자에 의하여 사용되며, 하나의 개념스크마를 가지고 있음</td></tr><tr><td>내부단계</td><td>- 물리적은 저장구조를 표현, 데이터를 실제로 어떻게 저장할지에 대하여 데이터베이스 관리자가 기술<br> - 시스템 설계자나 시스템 프로그래머가 데이터를 바라보는 관점<br> - 라나의 내부스키마를 가짐</td></tr></tbody></table>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="database" term="database"/>
        <category label="정보관리" term="정보관리"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[DataBase CAP 이론이란]]></title>
        <id>https://100milliongold.github.io/blog/post/2023/02/13/cap-이론</id>
        <link href="https://100milliongold.github.io/blog/post/2023/02/13/cap-이론"/>
        <updated>2023-02-13T01:18:58.000Z</updated>
        <summary type="html"><![CDATA[Consistency, Availability, Partition tolerance]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="consistency-availability-partition-tolerance">Consistency, Availability, Partition tolerance<a href="#consistency-availability-partition-tolerance" class="hash-link" aria-label="Consistency, Availability, Partition tolerance에 대한 직접 링크" title="Consistency, Availability, Partition tolerance에 대한 직접 링크">​</a></h2><p>C, A, P 중 2개를 선택해야 한다. (3가지 모두 만족할 순 없음)</p><p><img loading="lazy" src="/blog/assets/images/image-bce1c829fd28d7f38dce88ac4f641d92.png" width="621" height="354" class="img_ev3q"></p><ul><li>일관성(Consistency)<ul><li>모든 노드들은 같은 시간에 동일한 항목에 대하여 같은 내용의 데이터를 사용자에게 보여준다.</li></ul></li><li>가용성(Availability)<ul><li>모든 사용자들이 읽기 및 쓰기가 가능해야 하며, 몇몇 노드의 장애 시에도 다른 노드에 영향을 미치면 안된다.</li></ul></li><li>분할내성(Partition tolerance)<ul><li>메시지 전달이 실패하거나 시스템 일부가 망가져도 시스템이 계속 동작할 수 있어야 한다.</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cap-선택-유형">CAP 선택 유형<a href="#cap-선택-유형" class="hash-link" aria-label="CAP 선택 유형에 대한 직접 링크" title="CAP 선택 유형에 대한 직접 링크">​</a></h2><table><thead><tr><th>분류</th><th>설명</th><th>예시</th></tr></thead><tbody><tr><td>C+A</td><td>메시지 손실을 방지하는 강한 신뢰형</td><td>일반적 RDBMS<br>오라클 등</td></tr><tr><td>C+P</td><td>데이터 보다는 성능이 중요한 퍼포먼스형</td><td>Big Table<br>MongoDB</td></tr><tr><td>A+P</td><td>일관성을 크게 요하지 않는 서비스에 적합</td><td>CouchDB<br>Cassandra</td></tr></tbody></table>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="database" term="database"/>
        <category label="정보관리" term="정보관리"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[다시 깃헙페이지로 이사갑니다.]]></title>
        <id>https://100milliongold.github.io/blog/post/2023/02/12/이사중/inde</id>
        <link href="https://100milliongold.github.io/blog/post/2023/02/12/이사중/inde"/>
        <updated>2023-02-12T18:14:58.000Z</updated>
        <summary type="html"><![CDATA[이사중]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_LWe7" id="이사중">이사중<a href="#이사중" class="hash-link" aria-label="이사중에 대한 직접 링크" title="이사중에 대한 직접 링크">​</a></h3><p>커스터마이징 하는겸 구글에 노출되기 위해서</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="할일">할일<a href="#할일" class="hash-link" aria-label="할일에 대한 직접 링크" title="할일에 대한 직접 링크">​</a></h3><ul class="contains-task-list containsTaskList_mC6p"><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->메인화면 제작</li><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->곳곳에 있는 자료들 통합</li><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->사이트 등록</li><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->댓글 기능 개발</li></ul>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NestJS 오류 TypeError 0 , cookie_parser_1.default is not a function]]></title>
        <id>https://100milliongold.github.io/blog/post/NestJS-오류-TypeError-0-cookieparser1.default-is-not-a-function</id>
        <link href="https://100milliongold.github.io/blog/post/NestJS-오류-TypeError-0-cookieparser1.default-is-not-a-function"/>
        <updated>2022-09-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[아래와 같은 오류를 만났다.]]></summary>
        <content type="html"><![CDATA[<p>아래와 같은 오류를 만났다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Nest</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21927</span><span class="token plain">  - </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">. </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">. 09. 오후 </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">:38:42     LOG </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">InstanceLoader</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> TypeOrmCoreModule dependencies initialized +47ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Nest</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21927</span><span class="token plain">  - </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">. </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">. 09. 오후 </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">:38:42     LOG </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">InstanceLoader</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> TypeOrmModule dependencies initialized +1ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Nest</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21927</span><span class="token plain">  - </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">. </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">. 09. 오후 </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">:38:42     LOG </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">InstanceLoader</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> AuthModule dependencies initialized +0ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Nest</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21927</span><span class="token plain">  - </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">. </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">. 09. 오후 </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">:38:42     LOG </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">InstanceLoader</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> UsersModule dependencies initialized +1ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Nest</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">21927</span><span class="token plain">  - </span><span class="token number" style="color:#36acaa">2021</span><span class="token plain">. </span><span class="token number" style="color:#36acaa">11</span><span class="token plain">. 09. 오후 </span><span class="token number" style="color:#36acaa">3</span><span class="token plain">:38:42     LOG </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">InstanceLoader</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> AppModule dependencies initialized +0ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/Users/xii/src/main.ts:28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  app.use</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cookieParser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">))</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      ^</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TypeError: </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> , cookie_parser_1.default</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> is not a </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at bootstrap </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">/Users/im-uchan/Desktop/~~~~~/src/main.ts:28:23</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    at processTicksAndRejections </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">node:internal/process/task_queues:96:5</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> cookieParser </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'cookie-parser'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//...........</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">app</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">use</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">cookieParser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>import때문에 발생한 문제이다.</p><p>tsconfig.json에 들어가 <code>"esModuleInterop": true</code>를 추가해주자.</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"compilerOptions"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"module"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"commonjs"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"declaration"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"removeComments"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"emitDecoratorMetadata"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"experimentalDecorators"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"allowSyntheticDefaultImports"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"esModuleInterop"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 추가</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"target"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"es2017"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"sourceMap"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"outDir"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./dist"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"baseUrl"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"./"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"incremental"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"skipLibCheck"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"strictNullChecks"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"noImplicitAny"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"strictBindCallApply"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"forceConsistentCasingInFileNames"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token property" style="color:#36acaa">"noFallthroughCasesInSwitch"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="nest" term="nest"/>
        <category label="typescript" term="typescript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[DTO를 이너 클래스로 관리하기]]></title>
        <id>https://100milliongold.github.io/blog/post/DTO를-이너-클래스로-관리하기</id>
        <link href="https://100milliongold.github.io/blog/post/DTO를-이너-클래스로-관리하기"/>
        <updated>2022-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[DTO를 도메인의 이너 클래스로 관리해, DTO 관리 편의성을 높여봅니다.]]></summary>
        <content type="html"><![CDATA[<blockquote><p>DTO를 도메인의 이너 클래스로 관리해, DTO 관리 편의성을 높여봅니다.</p></blockquote><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="goal">Goal<a href="#goal" class="hash-link" aria-label="Goal에 대한 직접 링크" title="Goal에 대한 직접 링크">​</a></h2><ul><li>DTO를 이너클래스로 관리해 개발 편의성을 올려봅니다.</li><li>도메인 클래스안에 DTO를 이너클래스로 두는것이 설계상 괜찮은지에 대해서 고민해봅니다.</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="요청별로-dto를-외부-클래스로-나누어-관리하는-경우">요청별로 DTO를 외부 클래스로 나누어 관리하는 경우<a href="#요청별로-dto를-외부-클래스로-나누어-관리하는-경우" class="hash-link" aria-label="요청별로 DTO를 외부 클래스로 나누어 관리하는 경우에 대한 직접 링크" title="요청별로 DTO를 외부 클래스로 나누어 관리하는 경우에 대한 직접 링크">​</a></h2><blockquote><p>너무 많은 DTO 클래스가 생겨 관리가 힘들어질 수 있습니다.</p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@NoArgsConstructor(access = AccessLevel.PROTECTED)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Entity</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Member {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Long id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Member(final String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.name = name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>만약 <strong>Member</strong>라는 도메인 클래스가 있다고 해봅시다.</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@NoArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MemberCreateRequest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MemberCreateResponse {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Long id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>이때 Member를 create하는 기능이 필요할시, <code>MemberCreateRequest</code>, <code>MemberCreateResponse</code> 벌써 두개의 DTO 클래스가 필요해집니다.</li><li>지금은 단순히 2개이지만, 여러 DTO가 계속 필요해지는 상황이 온다면 <code>MemberxxxRequest</code> 이런 DTO 클래스가 점점 늘어나게 되어 DTO를 선별하고 구분하는데 인적 리소스가 소모되게 될것입니다.</li></ul><p><img loading="lazy" src="/blog/assets/images/image-dd39baadac68ed47c9996c88b56c35fa.png" width="412" height="916" class="img_ev3q"></p><blockquote><p>과거 진행한 프로젝트의 수많은 DTO 클래스들...</p></blockquote><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dto를-이너-클래스로-관리">DTO를 이너 클래스로 관리<a href="#dto를-이너-클래스로-관리" class="hash-link" aria-label="DTO를 이너 클래스로 관리에 대한 직접 링크" title="DTO를 이너 클래스로 관리에 대한 직접 링크">​</a></h2><blockquote><p>DTO를 관리하는 (인적)비용이 줄어듭니다.  </p></blockquote><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@NoArgsConstructor(access = AccessLevel.PROTECTED)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Entity</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Member {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private Long id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Member(final String name) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.name = name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @NoArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class Request {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static class Response {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private Long id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String name;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>위처럼 이너 클래스를 이용해, Member안에 Request와 Response DTO를 가지게 있게 한다면 어떻게 될까요.</li><li>Member 클래스만 보고 관련된 DTO를 빠르게 찾을 수 있게되어, 인적 리소스가 줄어들고 개발의 편의성이 늘어나게 됩니다.</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@RestController</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@RequestMapping("/api/member")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class MemberController {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @GetMapping("/{id}")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public ResponseEntity&lt;Member.Response&gt; getMember(@PathVariable final Long id) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return ResponseEntity.ok(new Member.Response(id, "unluckyjung"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @PostMapping</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public ResponseEntity&lt;Member.Response&gt; create(@RequestBody final Member.Request request) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        //...저장 로직</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return ResponseEntity.created(URI.create(String.format("/api/member/%d", 1L)))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .body(new Member.Response(1L, request.getName()));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li>이너클래스를 요청, 응답을 처리하는 컨트롤러 예제를 간단하게 작성하면, 위와 같이 구현할 수 있게 됩니다.</li><li>(위 예제가 실제 개발에서 적용되는 방식은 아닙니다. 단순히 이해를 쉽기 위해서 작성한 예제일 뿐입니다.)</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="고민되는-사항">고민되는 사항<a href="#고민되는-사항" class="hash-link" aria-label="고민되는 사항에 대한 직접 링크" title="고민되는 사항에 대한 직접 링크">​</a></h2><blockquote><p>도메인이 DTO의 형태를 알고 있게 되는건 아닐까? 둘의 결합도가 높아지는건 아닐까?   </p></blockquote><ul><li>DTO를 도메인 객체와 분리해서 사용하는 이유는, <strong>DTO는 변경이 찾지만 도메인 객체는 그렇지 않습니다.</strong> 따라서 도메인을 DTO로 사용하는것은 변경이 잦은 형태에 의존성을 띠고 있는 형태가 되어, 올바르지 못한 설계가 되기때문에 도메인과 DTO 두개를 분리하는것 입니다.</li><li>하지만, 위와같이 도메인(엄밀하게 따지면 엔티티이지만, 도메인으로 하겠습니다.) 객체가 DTO를 이너클래스로 가지고 있는 형태는 <strong>도메인이 DTO를 알고 있는 형태가 되어, 잘못된 설계가 아닌가?</strong> 라는 생각이 순간들었습니다.</li></ul><blockquote><p><strong>결론적으로는 위의 예시와같은 형태는 괜찮다라고 생각합니다.</strong>  </p></blockquote><ul><li>의존성을 띠고 있는 형태라 함은 Domain <strong>객체의 로직에 DTO가 영향</strong>을 주게 되는것을 뜻하는것이라고 생각합니다.</li><li>하지만 위와 같은 이너클래스 형태는 단순히 도메인 클래스안에 DTO 클래스를 들고만 있지, DTO 와 <strong>도메인의 로직에는 전혀 영향이 없는 형태</strong>입니다. 즉 로직이나 상태에 따른 의존성이 있는 형태는 아닌거죠.</li><li><code>도메인 &lt;-&gt; DTO</code> 끼리 연관이 생긴다는것보다는, 해당 도메인과 관련된 DTO를 같이 묶어두기 위한 정도인거죠.</li><li>즉, 편의성을 위해서 도메인내에 이너 클래스를 묶어서 사용하는것이기 때문에 다른 시야로 봐야한다고 결론 내렸습니다.</li><li><strong>물론 여러 도메인들이 합쳐져서 만들어지는 DTO 라면, 한 도메인의 이너클래스로 DTO를 사용하면 안되겠죠.</strong></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="장점">장점<a href="#장점" class="hash-link" aria-label="장점에 대한 직접 링크" title="장점에 대한 직접 링크">​</a></h3><blockquote><p>응집도가 높아지는 효과가 있습니다.  </p></blockquote><ul><li>위에서 말한 <strong>여러 도메인들이 합쳐져서 만들어지는 DTO 는 이너클래스로 사용하지 않는다.</strong> 라는 룰을 지킨다면</li><li>개발자 입장에서 이너클래스의 DTO를 보았을때 이너 클래스 DTO는 해당 클래스 안에서만 한정적으로 사용한다는 의미를 부여할 수 있어, 응집력이 높아지고 개발자들이 신경써야 하는 외부클래스의 개수가 줄어들어 개발 편의성을 높이는 효과를 나타낼 수 있다고 생각합니다.</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="#conclusion" class="hash-link" aria-label="Conclusion에 대한 직접 링크" title="Conclusion에 대한 직접 링크">​</a></h2><ul><li>이너클래스를 이용해 DTO 관리의 편의성을 높일 수 있다.</li><li>하지만 이너클래스로 만들어진 DTO는, 속해 있는 도메인 클래스로만 구성되는 경우에 사용해야한다.</li></ul><hr><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reference">Reference<a href="#reference" class="hash-link" aria-label="Reference에 대한 직접 링크" title="Reference에 대한 직접 링크">​</a></h2><ul><li><a href="https://www.inflearn.com/questions/47205" target="_blank" rel="noopener noreferrer">https://www.inflearn.com/questions/47205</a></li><li><a href="https://velog.io/@ausg/Spring-Boot%EC%97%90%EC%84%9C-%EA%B9%94%EB%81%94%ED%95%98%EA%B2%8C-DTO-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0" target="_blank" rel="noopener noreferrer">https://velog.io/@ausg/Spring-Boot%EC%97%90%EC%84%9C-%EA%B9%94%EB%81%94%ED%95%98%EA%B2%8C-DTO-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="출처">출처<a href="#출처" class="hash-link" aria-label="출처에 대한 직접 링크" title="출처에 대한 직접 링크">​</a></h2><p><a href="https://unluckyjung.github.io/dev/2022/02/20/Dto-InnerClass/" target="_blank" rel="noopener noreferrer">DTO를 inner class로 관리하기
(https://unluckyjung.github.io/dev/2022/02/20/Dto-InnerClass/)</a></p>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="java" term="java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lombok을 이용해 Builder 패턴을 만들어보자.]]></title>
        <id>https://100milliongold.github.io/blog/post/Lombok을-이용해-Builder-패턴을-만들어보자</id>
        <link href="https://100milliongold.github.io/blog/post/Lombok을-이용해-Builder-패턴을-만들어보자"/>
        <updated>2022-05-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Builder 패턴이란?]]></summary>
        <content type="html"><![CDATA[<p>Builder 패턴이란?
Effective Java 규칙 2 - 조슈아 블로그</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">생성자에 인자가 많을 때는 빌더 패턴을 고려하라</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>빌더 패턴(Builder pattern) 이란 복합 객체의 생성 과정과 표현 방법을 분리하여 동일한 생성 절차에서 서로 다른 표현 결과를 만들 수 있게 하는 패턴이다. (출처: 위키백과)</p><p>난 생성자가 많아지면 빌더 패턴을 만드는 편인데, 개발자 성향에 따라 다를수도 있구나를 느꼈다.</p><p>빌더패턴을 활용하면 어떤 필드에 어떤 인자를 넣어줬는지 명확히 알 수 있고, 넣어줄 필요 없는 필드(null)는 굳이 선언할 필요 없으니 좋다고 생각했다. 근데 다른 분은 어떤 필드에 null이 들어간다는걸 명확히 볼 수 있는 점 때문에 생성자를 통해 객체를 생성하시는 방법을 택했다고 하셨다.</p><p>intelliJ는 들어갈 필드의 값을 표시해주는 기능이 있어서 생성자를 통해 객체를 생성해도 어떤 필드를 넣어줘야하는지 보인다. 첫 회사에서는 STS를 썼기 때문에 intelliJ의 다양한 기능적인 혜택을 누리지 못했기도 해서 빌더 패턴이 유용했다.</p><p>코틀린을 사용할 경우에는.... 굳이 빌더 패턴을 쓸 필요가 없을 것 같다 싶었던 이유가 생성자 인자에 필드 명도 함께 표기할 수 있다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    // 예시</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fun foo() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        val member = Member(name = "zorba", job = "developer")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>하지만, java를 쓸 때는 자주 사용하는 디자인 패턴이다.</p><p>빌더 패턴의 장점</p><ol><li>객체들마다 들어가야할 인자가 각각 다를 때 유연하게 사용할 수 있다.</li></ol><ol start="2"><li>무조건 setter 생성을 방지하고 불변객체로 만들 수 있다.</li></ol><ol start="3"><li>필수 argument를 지정할 수 있다.(보통의 경우, PK 역할을 할 Id 값이 될 것이다.)</li></ol><p>Builder 패턴은 어떻게 작성하나?
이 페이지를 들어가면 명확하게 빌더 패턴을 어떻게 작성해야하는지 알 수 있다. 빌더 패턴 예제코드</p><p>Java 사용자라면 잘 아는 StringBuilder가 이 빌더 패턴으로 작성된 라이브러리다.</p><p>근데 클래스를 만들 때마다 이 기나긴 코드를 짜기 불편하다!
그래서 Java 개발자들의 보일러플레이트 코드를 획기적으로 줄여준 라이브러리인 Lombok을 활용해보자.</p><p>바로 @Builder 애노테이션 을 사용하면 예제코드처럼 긴 코드를 작성하지 않아도 된다.</p><p>Builder 패턴을 적용할 클래스</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    @AllArgsConstructor(access = AccessLevel.PRIVATE)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Builder(builderMethodName = "travelCheckListBuilder")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @ToString</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public class TravelCheckList {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private Long id;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String passport;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String flightTicket;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String creditCard;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String internationalDriverLicense;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        private String travelerInsurance;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static TravelCheckListBuilder builder(Long id) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if(id == null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                throw new IllegalArgumentException("필수 파라미터 누락");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return travelCheckListBuilder().id(id);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>확인용 클래스</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    public class MainClass {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 빌더패턴을 통해 어떤 필드에 어떤 값을 넣어주는지 명확히 눈으로 확인할 수 있다!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            TravelCheckList travelCheckList = TravelCheckList.builder(145L)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .passport("M12345")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .flightTicket("Paris flight ticket")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .creditCard("Shinhan card")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .internationalDriverLicense("1235-5345")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .travelerInsurance("Samsung insurance")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    .build();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println("빌더 패턴 적용하기 : " + travelCheckList.toString());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       // 결과</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       // 빌더 패턴 적용하기 : TravelCheckList(id=1, passport=M12345, flightTicket=Paris flight ticket, creditCard=Shinhan card, internationalDriverLicense=1235-5345, travelerInsurance=Samsung insurance)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>@AllArgsConstructor(access = AccessLevel.PRIVATE)</code> : @Builder 애노테이션을 선언하면 전체 인자를 갖는 생성자를 자동으로 만든다. @AllArgsConstructor는 전체 인자를 갖는 생성자를 만드는데, 접근자를 private으로 만들어서 외부에서 접근할 수 없도록 만든다.</p><p><code>@Builder</code> : 위에서 설명했던 Builder 패턴을 자동으로 생성해주는데, builderMethodName에 들어간 이름으로 빌더 메서드를 생성해준다. 나같은 경우, 혼동을 줄이기 위해 클래스 명과 동일하게 놔두고 Builder로 선언했다.</p><p>클래스 내부 builder 메서드 : 필수로 들어가야할 필드들을 검증하기 위해 만들었다. 꼭 id가 아니라도 해당 클래스를 객체로 생성할 때 필수적인 필드가 있다면 활용할 수 있다.</p><p>이렇게 Lombok을 활용하면 반복적으로 길게 짜야하는 코드(보일러 플레이트 코드)를 엄청나게 줄여줄 수 있다.</p><p>빌더 패턴을 사용하면서 무분별한 setter를 남용한다면.... 빌더패턴의 장점을 극대화해서 사용하는 건 아닌 것 같다.</p>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="java" term="java"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[networkpolicy 생성]]></title>
        <id>https://100milliongold.github.io/blog/post/networkpolicy-생성</id>
        <link href="https://100milliongold.github.io/blog/post/networkpolicy-생성"/>
        <updated>2022-04-25T00:00:00.000Z</updated>
        <content type="html"><![CDATA[<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> networking.k8s.io/v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> NetworkPolicy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> internal</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">policy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">podSelector</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">matchLabels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> internal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">policyTypes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> Egress</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> Ingress</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ingress</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">egress</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">to</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">podSelector</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">matchLabels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">protocol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> TCP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3306</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">to</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">podSelector</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">matchLabels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> payroll</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">protocol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> TCP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8080</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">53</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">protocol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> UDP</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">53</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">protocol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> TCP</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="kubernetes" term="kubernetes"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://100milliongold.github.io/blog/post/welcome</id>
        <link href="https://100milliongold.github.io/blog/post/welcome"/>
        <updated>2021-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Docusaurus blogging features are powered by the blog plugin.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://docusaurus.io/docs/blog" target="_blank" rel="noopener noreferrer">Docusaurus blogging features</a> are powered by the <a href="https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog" target="_blank" rel="noopener noreferrer">blog plugin</a>.</p><p>Simply add Markdown files (or folders) to the <code>blog</code> directory.</p><p>Regular blog authors can be added to <code>authors.yml</code>.</p><p>The blog post date can be extracted from filenames, such as:</p><ul><li><code>2019-05-30-welcome.md</code></li><li><code>2019-05-30-welcome/index.md</code></li></ul><p>A blog post folder can be convenient to co-locate blog post images:</p><p><img loading="lazy" alt="Docusaurus Plushie" src="/blog/assets/images/docusaurus-plushie-banner-a60f7593abca1e3eef26a9afa244e4fb.jpeg" width="1500" height="500" class="img_ev3q"></p><p>The blog supports tags as well!</p><p><strong>And if you don't want a blog</strong>: just delete this directory, and use <code>blog: false</code> in your Docusaurus config.</p>]]></content>
        <author>
            <name>100milliongold</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="facebook" term="facebook"/>
        <category label="hello" term="hello"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[hexo -> notion 으로 데이터 이전중 입니다.]]></title>
        <id>https://100milliongold.github.io/blog/post/hexo-notion-으로-데이터-이전중-입니다</id>
        <link href="https://100milliongold.github.io/blog/post/hexo-notion-으로-데이터-이전중-입니다"/>
        <updated>2019-10-02T10:27:59.000Z</updated>
        <summary type="html"><![CDATA[ㅈㄱㄴ]]></summary>
        <content type="html"><![CDATA[<p>ㅈㄱㄴ</p>]]></content>
        <category label="portfolio" term="portfolio"/>
    </entry>
</feed>